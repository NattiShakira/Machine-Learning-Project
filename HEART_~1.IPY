{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Heart Disease Detection with Decision Trees and Random Forest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline \n",
    "import seaborn as sns\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.tree import plot_tree\n",
    "from sklearn.metrics import recall_score\n",
    "from sklearn.metrics import precision_score\n",
    "from sklearn.metrics import classification_report\n",
    "from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\n",
    "from imblearn.over_sampling import SMOTE"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Exploratory Data Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>sex</th>\n",
       "      <th>cp</th>\n",
       "      <th>trestbps</th>\n",
       "      <th>chol</th>\n",
       "      <th>fbs</th>\n",
       "      <th>restecg</th>\n",
       "      <th>thalach</th>\n",
       "      <th>exang</th>\n",
       "      <th>oldpeak</th>\n",
       "      <th>slope</th>\n",
       "      <th>ca</th>\n",
       "      <th>thal</th>\n",
       "      <th>class</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>63.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>145.0</td>\n",
       "      <td>233.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>150.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.3</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>67.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>160.0</td>\n",
       "      <td>286.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>108.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.5</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>67.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>120.0</td>\n",
       "      <td>229.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>129.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.6</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>37.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>130.0</td>\n",
       "      <td>250.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>187.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.5</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>41.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>130.0</td>\n",
       "      <td>204.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>172.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    age  sex   cp  trestbps   chol  fbs  restecg  thalach  exang  oldpeak  \\\n",
       "0  63.0  1.0  1.0     145.0  233.0  1.0      2.0    150.0    0.0      2.3   \n",
       "1  67.0  1.0  4.0     160.0  286.0  0.0      2.0    108.0    1.0      1.5   \n",
       "2  67.0  1.0  4.0     120.0  229.0  0.0      2.0    129.0    1.0      2.6   \n",
       "3  37.0  1.0  3.0     130.0  250.0  0.0      0.0    187.0    0.0      3.5   \n",
       "4  41.0  0.0  2.0     130.0  204.0  0.0      2.0    172.0    0.0      1.4   \n",
       "\n",
       "   slope   ca  thal  class  \n",
       "0    3.0  0.0   6.0      0  \n",
       "1    2.0  3.0   3.0      2  \n",
       "2    2.0  2.0   7.0      1  \n",
       "3    3.0  0.0   3.0      0  \n",
       "4    1.0  0.0   3.0      0  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset = pd.read_csv('HeartDisease.csv')\n",
    "dataset.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>sex</th>\n",
       "      <th>cp</th>\n",
       "      <th>trestbps</th>\n",
       "      <th>chol</th>\n",
       "      <th>fbs</th>\n",
       "      <th>restecg</th>\n",
       "      <th>thalach</th>\n",
       "      <th>exang</th>\n",
       "      <th>oldpeak</th>\n",
       "      <th>slope</th>\n",
       "      <th>ca</th>\n",
       "      <th>thal</th>\n",
       "      <th>class</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>292</th>\n",
       "      <td>57.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>140.0</td>\n",
       "      <td>241.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>123.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>293</th>\n",
       "      <td>45.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>110.0</td>\n",
       "      <td>264.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>132.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>294</th>\n",
       "      <td>68.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>144.0</td>\n",
       "      <td>193.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>141.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.4</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>295</th>\n",
       "      <td>57.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>130.0</td>\n",
       "      <td>131.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>115.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>296</th>\n",
       "      <td>57.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>130.0</td>\n",
       "      <td>236.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>174.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      age  sex   cp  trestbps   chol  fbs  restecg  thalach  exang  oldpeak  \\\n",
       "292  57.0  0.0  4.0     140.0  241.0  0.0      0.0    123.0    1.0      0.2   \n",
       "293  45.0  1.0  1.0     110.0  264.0  0.0      0.0    132.0    0.0      1.2   \n",
       "294  68.0  1.0  4.0     144.0  193.0  1.0      0.0    141.0    0.0      3.4   \n",
       "295  57.0  1.0  4.0     130.0  131.0  0.0      0.0    115.0    1.0      1.2   \n",
       "296  57.0  0.0  2.0     130.0  236.0  0.0      2.0    174.0    0.0      0.0   \n",
       "\n",
       "     slope   ca  thal  class  \n",
       "292    2.0  0.0   7.0      1  \n",
       "293    2.0  0.0   7.0      1  \n",
       "294    2.0  2.0   7.0      2  \n",
       "295    2.0  1.0   7.0      3  \n",
       "296    2.0  1.0   3.0      1  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(297, 14)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "age         0\n",
       "sex         0\n",
       "cp          0\n",
       "trestbps    0\n",
       "chol        0\n",
       "fbs         0\n",
       "restecg     0\n",
       "thalach     0\n",
       "exang       0\n",
       "oldpeak     0\n",
       "slope       0\n",
       "ca          0\n",
       "thal        0\n",
       "class       0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 297 entries, 0 to 296\n",
      "Data columns (total 14 columns):\n",
      " #   Column    Non-Null Count  Dtype  \n",
      "---  ------    --------------  -----  \n",
      " 0   age       297 non-null    float64\n",
      " 1   sex       297 non-null    float64\n",
      " 2   cp        297 non-null    float64\n",
      " 3   trestbps  297 non-null    float64\n",
      " 4   chol      297 non-null    float64\n",
      " 5   fbs       297 non-null    float64\n",
      " 6   restecg   297 non-null    float64\n",
      " 7   thalach   297 non-null    float64\n",
      " 8   exang     297 non-null    float64\n",
      " 9   oldpeak   297 non-null    float64\n",
      " 10  slope     297 non-null    float64\n",
      " 11  ca        297 non-null    float64\n",
      " 12  thal      297 non-null    float64\n",
      " 13  class     297 non-null    int64  \n",
      "dtypes: float64(13), int64(1)\n",
      "memory usage: 32.6 KB\n"
     ]
    }
   ],
   "source": [
    "dataset.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    160\n",
       "1     54\n",
       "3     35\n",
       "2     35\n",
       "4     13\n",
       "Name: class, dtype: int64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Classes are unbalanced, we will have to solve this problem before applying our classifiers for multi-class classification\n",
    "# For binary classification, the classes are more or less balanced\n",
    "\n",
    "dataset['class'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.5387, 0.1818, 0.1178, 0.1178, 0.0438)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "class_0 = ((dataset['class']==0).sum()/dataset.shape[0]).round(4)\n",
    "class_1 = ((dataset['class']==1).sum()/dataset.shape[0]).round(4)\n",
    "class_2 = ((dataset['class']==2).sum()/dataset.shape[0]).round(4)\n",
    "class_3 = ((dataset['class']==3).sum()/dataset.shape[0]).round(4)\n",
    "class_4 = ((dataset['class']==4).sum()/dataset.shape[0]).round(4)\n",
    "class_0, class_1, class_2, class_3, class_4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(class_0+class_1+class_2+class_3+class_4).round(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.4613"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Class \"Disease\" is 0.4613, class \"No_disease\" is 0.5387\n",
    "\n",
    "class_disease = (1-class_0).round(4)\n",
    "class_disease"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x504 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "classes = ['Class 0', 'Class 1', 'Class 2', 'Class 3', 'Class 4']\n",
    "data = [160, 54, 35, 35, 13]\n",
    "colors = ('lawngreen', 'moccasin', 'lightblue', 'pink', 'beige')\n",
    "\n",
    "def func(pct, allvalues):\n",
    "    absolute = int(pct / 100.*np.sum(allvalues))\n",
    "    return '{:.2f}%\\n({:d})'.format(pct, absolute)\n",
    "\n",
    "fig, ax = plt.subplots(figsize =(10, 7))\n",
    "wedges, texts, autotexts = ax.pie(data, autopct = lambda pct: func(pct, data),\n",
    "                                  explode = None, labels = classes, shadow = False,\n",
    "                                  colors = colors, startangle = 90, wedgeprops = None,\n",
    "                                  textprops = dict(color ='black'))\n",
    " \n",
    "plt.setp(autotexts, size = 14)\n",
    "ax.set_title('Proportion of classes (multi-class)')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x504 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "classes_b = ['Class 0', 'Class 1']\n",
    "data_b = [160, 137]\n",
    "colors_b = ('lightblue', 'pink')\n",
    "\n",
    "fig, ax = plt.subplots(figsize =(10, 7))\n",
    "wedges, texts, autotexts = ax.pie(data_b, autopct = lambda pct: func(pct, data_b),\n",
    "                                  explode = None, labels = classes_b, shadow = False,\n",
    "                                  colors = colors_b, startangle = 90, wedgeprops = None,\n",
    "                                  textprops = dict(color ='black'))\n",
    "\n",
    "plt.setp(autotexts, size = 14)\n",
    "ax.set_title('Proportion of classes (binary)')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>sex</th>\n",
       "      <th>cp</th>\n",
       "      <th>trestbps</th>\n",
       "      <th>chol</th>\n",
       "      <th>fbs</th>\n",
       "      <th>restecg</th>\n",
       "      <th>thalach</th>\n",
       "      <th>exang</th>\n",
       "      <th>oldpeak</th>\n",
       "      <th>slope</th>\n",
       "      <th>ca</th>\n",
       "      <th>thal</th>\n",
       "      <th>class</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>297.000000</td>\n",
       "      <td>297.000000</td>\n",
       "      <td>297.000000</td>\n",
       "      <td>297.000000</td>\n",
       "      <td>297.000000</td>\n",
       "      <td>297.000000</td>\n",
       "      <td>297.000000</td>\n",
       "      <td>297.000000</td>\n",
       "      <td>297.000000</td>\n",
       "      <td>297.000000</td>\n",
       "      <td>297.000000</td>\n",
       "      <td>297.000000</td>\n",
       "      <td>297.000000</td>\n",
       "      <td>297.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>54.542088</td>\n",
       "      <td>0.676768</td>\n",
       "      <td>3.158249</td>\n",
       "      <td>131.693603</td>\n",
       "      <td>247.350168</td>\n",
       "      <td>0.144781</td>\n",
       "      <td>0.996633</td>\n",
       "      <td>149.599327</td>\n",
       "      <td>0.326599</td>\n",
       "      <td>1.055556</td>\n",
       "      <td>1.602694</td>\n",
       "      <td>0.676768</td>\n",
       "      <td>4.730640</td>\n",
       "      <td>0.946128</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>9.049736</td>\n",
       "      <td>0.468500</td>\n",
       "      <td>0.964859</td>\n",
       "      <td>17.762806</td>\n",
       "      <td>51.997583</td>\n",
       "      <td>0.352474</td>\n",
       "      <td>0.994914</td>\n",
       "      <td>22.941562</td>\n",
       "      <td>0.469761</td>\n",
       "      <td>1.166123</td>\n",
       "      <td>0.618187</td>\n",
       "      <td>0.938965</td>\n",
       "      <td>1.938629</td>\n",
       "      <td>1.234551</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>29.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>94.000000</td>\n",
       "      <td>126.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>71.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>48.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>120.000000</td>\n",
       "      <td>211.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>133.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>56.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>130.000000</td>\n",
       "      <td>243.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>153.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.800000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>61.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>140.000000</td>\n",
       "      <td>276.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>166.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.600000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>77.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>200.000000</td>\n",
       "      <td>564.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>202.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>6.200000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              age         sex          cp    trestbps        chol         fbs  \\\n",
       "count  297.000000  297.000000  297.000000  297.000000  297.000000  297.000000   \n",
       "mean    54.542088    0.676768    3.158249  131.693603  247.350168    0.144781   \n",
       "std      9.049736    0.468500    0.964859   17.762806   51.997583    0.352474   \n",
       "min     29.000000    0.000000    1.000000   94.000000  126.000000    0.000000   \n",
       "25%     48.000000    0.000000    3.000000  120.000000  211.000000    0.000000   \n",
       "50%     56.000000    1.000000    3.000000  130.000000  243.000000    0.000000   \n",
       "75%     61.000000    1.000000    4.000000  140.000000  276.000000    0.000000   \n",
       "max     77.000000    1.000000    4.000000  200.000000  564.000000    1.000000   \n",
       "\n",
       "          restecg     thalach       exang     oldpeak       slope          ca  \\\n",
       "count  297.000000  297.000000  297.000000  297.000000  297.000000  297.000000   \n",
       "mean     0.996633  149.599327    0.326599    1.055556    1.602694    0.676768   \n",
       "std      0.994914   22.941562    0.469761    1.166123    0.618187    0.938965   \n",
       "min      0.000000   71.000000    0.000000    0.000000    1.000000    0.000000   \n",
       "25%      0.000000  133.000000    0.000000    0.000000    1.000000    0.000000   \n",
       "50%      1.000000  153.000000    0.000000    0.800000    2.000000    0.000000   \n",
       "75%      2.000000  166.000000    1.000000    1.600000    2.000000    1.000000   \n",
       "max      2.000000  202.000000    1.000000    6.200000    3.000000    3.000000   \n",
       "\n",
       "             thal       class  \n",
       "count  297.000000  297.000000  \n",
       "mean     4.730640    0.946128  \n",
       "std      1.938629    1.234551  \n",
       "min      3.000000    0.000000  \n",
       "25%      3.000000    0.000000  \n",
       "50%      3.000000    0.000000  \n",
       "75%      7.000000    2.000000  \n",
       "max      7.000000    4.000000  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1.1. Age"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "age_min = dataset['age'].min()\n",
    "age_mean = dataset['age'].mean()\n",
    "age_median = dataset['age'].median()\n",
    "age_max = dataset['age'].max()\n",
    "age_std = dataset['age'].std()\n",
    "\n",
    "dataset['age'].plot.hist(bins=50, figsize=(8, 4), title='Age', color='pink')\n",
    "plt.axvline(age_mean, ls='-', lw=2, color='red')\n",
    "plt.axvline(age_median, ls='--', lw=2, color='red')\n",
    "plt.annotate(f'Min: {round(age_min, 2)} years', xy=(0.61, 0.95), xycoords='axes fraction', fontsize=12)\n",
    "plt.annotate(f'Mean: {round(age_mean, 2)} years (solid)', xy=(0.61, 0.9), xycoords='axes fraction', fontsize=12)\n",
    "plt.annotate(f'Median: {round(age_median, 2)} years (dashed)', xy=(0.61, 0.85), xycoords='axes fraction', fontsize=12)\n",
    "plt.annotate(f'Max: {round(age_max, 2)} years', xy=(0.61, 0.8), xycoords='axes fraction', fontsize=12)\n",
    "plt.annotate(f'Std: {round(age_std, 2)} years', xy=(0.61, 0.75), xycoords='axes fraction', fontsize=12)\n",
    "ticks = np.arange(20, 81, 5).tolist()\n",
    "plt.xticks(ticks)\n",
    "plt.xlabel('Age')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Number of patients</th>\n",
       "      <th>Percentage, %</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>&lt;= 30 y.o.</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31-40 y.o.</th>\n",
       "      <td>16.0</td>\n",
       "      <td>5.39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41-50 y.o.</th>\n",
       "      <td>75.0</td>\n",
       "      <td>25.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51-60 y.o.</th>\n",
       "      <td>126.0</td>\n",
       "      <td>42.42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61-70 y.o.</th>\n",
       "      <td>73.0</td>\n",
       "      <td>24.58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>&gt; 70 y.o.</th>\n",
       "      <td>6.0</td>\n",
       "      <td>2.02</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            Number of patients  Percentage, %\n",
       "<= 30 y.o.                 1.0           0.34\n",
       "31-40 y.o.                16.0           5.39\n",
       "41-50 y.o.                75.0          25.25\n",
       "51-60 y.o.               126.0          42.42\n",
       "61-70 y.o.                73.0          24.58\n",
       "> 70 y.o.                  6.0           2.02"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "under_30 = (dataset['age']<=30).sum()\n",
    "age_30_40 = ((dataset['age']<=40).sum() - under_30).sum()\n",
    "age_40_50 = ((dataset['age']<=50).sum() - under_30 - age_30_40).sum()\n",
    "age_50_60 = ((dataset['age']<=60).sum() - under_30 - age_30_40 - age_40_50).sum()\n",
    "age_60_70 = ((dataset['age']<=70).sum() - under_30 - age_30_40 - age_40_50 - age_50_60).sum()\n",
    "age_70_80 = (dataset['age']>70).sum()\n",
    "pct_30 = under_30/dataset.shape[0]*100\n",
    "pct_30_40 = age_30_40/dataset.shape[0]*100\n",
    "pct_40_50 = age_40_50/dataset.shape[0]*100\n",
    "pct_50_60 = age_50_60/dataset.shape[0]*100\n",
    "pct_60_70 = age_60_70/dataset.shape[0]*100\n",
    "pct_70_80 = age_70_80/dataset.shape[0]*100\n",
    "\n",
    "table_age = pd.DataFrame({\n",
    "        '<= 30 y.o.': [under_30, pct_30],\n",
    "        '31-40 y.o.': [age_30_40, pct_30_40],\n",
    "        '41-50 y.o.': [age_40_50, pct_40_50],\n",
    "        '51-60 y.o.': [age_50_60, pct_50_60],\n",
    "        '61-70 y.o.': [age_60_70, pct_60_70],\n",
    "        '> 70 y.o.': [age_70_80, pct_70_80],\n",
    "    }, index = ['Number of patients', 'Percentage, %']).T.round(2)\n",
    "table_age"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "100.0"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "table_age['Percentage, %'].sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1.2. Sex"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0    201\n",
       "0.0     96\n",
       "Name: sex, dtype: int64"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset['sex'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.6768, 0.3232)"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "male_1 = ((dataset['sex']==1).sum()/dataset.shape[0]).round(4)\n",
    "female_0 = ((dataset['sex']==0).sum()/dataset.shape[0]).round(4)\n",
    "male_1, female_0"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1.3. Chest pain type (cp)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Number of patients</th>\n",
       "      <th>Percentage, %</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Type 1</th>\n",
       "      <td>23.0</td>\n",
       "      <td>7.74</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Type 2</th>\n",
       "      <td>49.0</td>\n",
       "      <td>16.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Type 3</th>\n",
       "      <td>83.0</td>\n",
       "      <td>27.95</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Type 4</th>\n",
       "      <td>142.0</td>\n",
       "      <td>47.81</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Number of patients  Percentage, %\n",
       "Type 1                23.0           7.74\n",
       "Type 2                49.0          16.50\n",
       "Type 3                83.0          27.95\n",
       "Type 4               142.0          47.81"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cp_1 = (dataset['cp']==1).sum()\n",
    "cp_2 = (dataset['cp']==2).sum()\n",
    "cp_3 = (dataset['cp']==3).sum()\n",
    "cp_4 = (dataset['cp']==4).sum()\n",
    "pct_cp_1 = cp_1/dataset.shape[0]*100\n",
    "pct_cp_2 = cp_2/dataset.shape[0]*100\n",
    "pct_cp_3 = cp_3/dataset.shape[0]*100\n",
    "pct_cp_4 = cp_4/dataset.shape[0]*100\n",
    "\n",
    "table_cp = pd.DataFrame({\n",
    "        'Type 1': [cp_1, pct_cp_1],\n",
    "        'Type 2': [cp_2, pct_cp_2],\n",
    "        'Type 3': [cp_3, pct_cp_3],\n",
    "        'Type 4': [cp_4, pct_cp_4],\n",
    "    }, index = ['Number of patients', 'Percentage, %']).T.round(2)\n",
    "table_cp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "table_cp['Number of patients'].plot.bar(title='Chest pain', legend=False, color='lightgreen', figsize=(6, 4))\n",
    "plt.xlabel('Type of chest pain')\n",
    "plt.ylabel('Number of patients')\n",
    "plt.xticks(rotation=0)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1.4. Resting blood pressure (trestbps)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "rbp_min = dataset['trestbps'].min()\n",
    "rbp_mean = dataset['trestbps'].mean()\n",
    "rbp_median = dataset['trestbps'].median()\n",
    "rbp_max = dataset['trestbps'].max()\n",
    "rbp_std = dataset['trestbps'].std()\n",
    "\n",
    "dataset['trestbps'].plot.hist(bins=30, figsize=(8, 4), title='Resting blood pressure', color='lightblue')\n",
    "plt.axvline(rbp_mean, ls='-', lw=2, color='b')\n",
    "plt.axvline(rbp_median, ls='--', lw=2, color='b')\n",
    "plt.annotate(f'Min: {round(rbp_min, 2)} mm Hg', xy=(0.56, 0.95), xycoords='axes fraction', fontsize=12)\n",
    "plt.annotate(f'Mean: {round(rbp_mean, 2)} mm Hg (solid)', xy=(0.56, 0.9), xycoords='axes fraction', fontsize=12)\n",
    "plt.annotate(f'Median: {round(rbp_median, 2)} mm Hg (dashed)', xy=(0.56, 0.85), xycoords='axes fraction', fontsize=12)\n",
    "plt.annotate(f'Max: {round(rbp_max, 2)} mm Hg', xy=(0.56, 0.8), xycoords='axes fraction', fontsize=12)\n",
    "plt.annotate(f'Std: {round(rbp_std, 2)} mm Hg', xy=(0.56, 0.75), xycoords='axes fraction', fontsize=12)\n",
    "ticks = np.arange(90, 201, 10).tolist()\n",
    "plt.xticks(ticks)\n",
    "plt.xlabel('Resting blood pressure')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Number of patients</th>\n",
       "      <th>Percentage, %</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>&lt;= 100 mm Hg</th>\n",
       "      <td>6.0</td>\n",
       "      <td>2.02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>101-120 mm Hg</th>\n",
       "      <td>91.0</td>\n",
       "      <td>30.64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>121-140 mm Hg</th>\n",
       "      <td>134.0</td>\n",
       "      <td>45.12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>141-160 mm Hg</th>\n",
       "      <td>51.0</td>\n",
       "      <td>17.17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>161-180 mm Hg</th>\n",
       "      <td>13.0</td>\n",
       "      <td>4.38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>&gt; 180 mm Hg</th>\n",
       "      <td>2.0</td>\n",
       "      <td>0.67</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Number of patients  Percentage, %\n",
       "<= 100 mm Hg                  6.0           2.02\n",
       "101-120 mm Hg                91.0          30.64\n",
       "121-140 mm Hg               134.0          45.12\n",
       "141-160 mm Hg                51.0          17.17\n",
       "161-180 mm Hg                13.0           4.38\n",
       "> 180 mm Hg                   2.0           0.67"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rbp_100 = (dataset['trestbps']<=100).sum()\n",
    "rbp_100_120 = ((dataset['trestbps']<=120).sum() - rbp_100).sum()\n",
    "rbp_120_140 = ((dataset['trestbps']<=140).sum() - rbp_100 - rbp_100_120).sum()\n",
    "rbp_140_160 = ((dataset['trestbps']<=160).sum() - rbp_100 - rbp_100_120 - rbp_120_140).sum()\n",
    "rbp_160_180 = ((dataset['trestbps']<=180).sum() - rbp_100 - rbp_100_120 - rbp_120_140 - rbp_140_160).sum()\n",
    "rbp_200 = (dataset['trestbps']>180).sum()\n",
    "pct_100 = rbp_100/dataset.shape[0]*100\n",
    "pct_100_120 = rbp_100_120/dataset.shape[0]*100\n",
    "pct_120_140 = rbp_120_140/dataset.shape[0]*100\n",
    "pct_140_160 = rbp_140_160/dataset.shape[0]*100\n",
    "pct_160_180 = rbp_160_180/dataset.shape[0]*100\n",
    "pct_200 = rbp_200/dataset.shape[0]*100\n",
    "\n",
    "table_rbp = pd.DataFrame({\n",
    "        '<= 100 mm Hg': [rbp_100, pct_100],\n",
    "        '101-120 mm Hg': [rbp_100_120, pct_100_120],\n",
    "        '121-140 mm Hg': [rbp_120_140, pct_120_140],\n",
    "        '141-160 mm Hg': [rbp_140_160, pct_140_160],\n",
    "        '161-180 mm Hg': [rbp_160_180, pct_160_180],\n",
    "        '> 180 mm Hg': [rbp_200, pct_200],\n",
    "    }, index = ['Number of patients', 'Percentage, %']).T.round(2)\n",
    "table_rbp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "100.0"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "table_rbp['Percentage, %'].sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1.5. Cholesterol (chol)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "chol_min = dataset['chol'].min()\n",
    "chol_mean = dataset['chol'].mean()\n",
    "chol_median = dataset['chol'].median()\n",
    "chol_max = dataset['chol'].max()\n",
    "chol_std = dataset['chol'].std()\n",
    "\n",
    "dataset['chol'].plot.hist(bins=50, figsize=(8, 4), title='Cholesterol', color='lightgreen')\n",
    "plt.axvline(chol_mean, ls='-', lw=2, color='g')\n",
    "plt.axvline(chol_median, ls='--', lw=2, color='g')\n",
    "plt.annotate(f'Min: {round(chol_min, 2)} mg/dl', xy=(0.56, 0.95), xycoords='axes fraction', fontsize=12)\n",
    "plt.annotate(f'Mean: {round(chol_mean, 2)} mg/dl (solid)', xy=(0.56, 0.9), xycoords='axes fraction', fontsize=12)\n",
    "plt.annotate(f'Median: {round(chol_median, 2)} mg/dl (dashed)', xy=(0.56, 0.85), xycoords='axes fraction', fontsize=12)\n",
    "plt.annotate(f'Max: {round(chol_max, 2)} mg/dl', xy=(0.56, 0.8), xycoords='axes fraction', fontsize=12)\n",
    "plt.annotate(f'Std: {round(chol_std, 2)} mg/dl', xy=(0.56, 0.75), xycoords='axes fraction', fontsize=12)\n",
    "ticks = np.arange(100, 601, 50).tolist()\n",
    "plt.xticks(ticks)\n",
    "plt.xlabel('Cholesterol')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Number of patients</th>\n",
       "      <th>Percentage, %</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>&lt;= 150 mg/dl</th>\n",
       "      <td>5.0</td>\n",
       "      <td>1.68</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>151-200 mg/dl</th>\n",
       "      <td>44.0</td>\n",
       "      <td>14.81</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>201-250 mg/dl</th>\n",
       "      <td>121.0</td>\n",
       "      <td>40.74</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>251-300 mg/dl</th>\n",
       "      <td>83.0</td>\n",
       "      <td>27.95</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>301-350 mg/dl</th>\n",
       "      <td>36.0</td>\n",
       "      <td>12.12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>&gt; 350 mg/dl</th>\n",
       "      <td>8.0</td>\n",
       "      <td>2.69</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Number of patients  Percentage, %\n",
       "<= 150 mg/dl                  5.0           1.68\n",
       "151-200 mg/dl                44.0          14.81\n",
       "201-250 mg/dl               121.0          40.74\n",
       "251-300 mg/dl                83.0          27.95\n",
       "301-350 mg/dl                36.0          12.12\n",
       "> 350 mg/dl                   8.0           2.69"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "chol_150 = (dataset['chol']<=150).sum()\n",
    "chol_150_200 = ((dataset['chol']<=200).sum() - chol_150).sum()\n",
    "chol_200_250 = ((dataset['chol']<=250).sum() - chol_150 - chol_150_200).sum()\n",
    "chol_250_300 = ((dataset['chol']<=300).sum() - chol_150 - chol_150_200 - chol_200_250).sum()\n",
    "chol_300_350 = ((dataset['chol']<=350).sum() - chol_150 - chol_150_200 - chol_200_250 - chol_250_300).sum()\n",
    "chol_350 = (dataset['chol']>350).sum()\n",
    "pct_150 = chol_150/dataset.shape[0]*100\n",
    "pct_150_200 = chol_150_200/dataset.shape[0]*100\n",
    "pct_200_250 = chol_200_250/dataset.shape[0]*100\n",
    "pct_250_300 = chol_250_300/dataset.shape[0]*100\n",
    "pct_300_350 = chol_300_350/dataset.shape[0]*100\n",
    "pct_350 = chol_350/dataset.shape[0]*100\n",
    "\n",
    "table_chol = pd.DataFrame({\n",
    "        '<= 150 mg/dl': [chol_150, pct_150],\n",
    "        '151-200 mg/dl': [chol_150_200, pct_150_200],\n",
    "        '201-250 mg/dl': [chol_200_250, pct_200_250],\n",
    "        '251-300 mg/dl': [chol_250_300, pct_250_300],\n",
    "        '301-350 mg/dl': [chol_300_350, pct_300_350],\n",
    "        '> 350 mg/dl': [chol_350, pct_350],\n",
    "    }, index = ['Number of patients', 'Percentage, %']).T.round(2)\n",
    "table_chol"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "99.99000000000001"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "table_chol['Percentage, %'].sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1.6. Fasting blood sugar (fbs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0    254\n",
       "1.0     43\n",
       "Name: fbs, dtype: int64"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset['fbs'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.1448, 0.8552)"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fbs_1 = ((dataset['fbs']==1).sum()/dataset.shape[0]).round(4)\n",
    "fbs_0 = ((dataset['fbs']==0).sum()/dataset.shape[0]).round(4)\n",
    "fbs_1, fbs_0"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1.7. Resting electrocardiographic results (restecg)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Number of patients</th>\n",
       "      <th>Percentage, %</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Type 0</th>\n",
       "      <td>147.0</td>\n",
       "      <td>49.49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Type 1</th>\n",
       "      <td>4.0</td>\n",
       "      <td>1.35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Type 2</th>\n",
       "      <td>146.0</td>\n",
       "      <td>49.16</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Number of patients  Percentage, %\n",
       "Type 0               147.0          49.49\n",
       "Type 1                 4.0           1.35\n",
       "Type 2               146.0          49.16"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "restecg_0 = (dataset['restecg']==0).sum()\n",
    "restecg_1 = (dataset['restecg']==1).sum()\n",
    "restecg_2 = (dataset['restecg']==2).sum()\n",
    "pct_restecg_0 = restecg_0/dataset.shape[0]*100\n",
    "pct_restecg_1 = restecg_1/dataset.shape[0]*100\n",
    "pct_restecg_2 = restecg_2/dataset.shape[0]*100\n",
    "\n",
    "table_restecg = pd.DataFrame({\n",
    "        'Type 0': [restecg_0, pct_restecg_0],\n",
    "        'Type 1': [restecg_1, pct_restecg_1],\n",
    "        'Type 2': [restecg_2, pct_restecg_2]\n",
    "    }, index = ['Number of patients', 'Percentage, %']).T.round(2)\n",
    "table_restecg"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "100.0"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "table_restecg['Percentage, %'].sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "table_restecg['Number of patients'].plot.bar(title='Resting electrocardiographic results', legend=False, color='orange', figsize=(6, 4))\n",
    "plt.xlabel('Type of resting electrocardiographic results')\n",
    "plt.ylabel('Number of patients')\n",
    "plt.xticks(rotation=0)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1.8. Maximum heart rate achieved (thalach)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "thalach_min = dataset['thalach'].min()\n",
    "thalach_mean = dataset['thalach'].mean()\n",
    "thalach_median = dataset['thalach'].median()\n",
    "thalach_max = dataset['thalach'].max()\n",
    "thalach_std = dataset['thalach'].std()\n",
    "\n",
    "dataset['thalach'].plot.hist(bins=50, figsize=(8, 4), title='Maximum heart rate', color='violet')\n",
    "plt.axvline(thalach_mean, ls='-', lw=2, color='purple')\n",
    "plt.axvline(thalach_median, ls='--', lw=2, color='purple')\n",
    "plt.annotate(f'Min: {round(thalach_min, 2)}', xy=(0.67, 0.95), xycoords='axes fraction', fontsize=12)\n",
    "plt.annotate(f'Mean: {round(thalach_mean, 2)} (solid)', xy=(0.67, 0.9), xycoords='axes fraction', fontsize=12)\n",
    "plt.annotate(f'Median: {round(thalach_median, 2)} (dashed)', xy=(0.67, 0.85), xycoords='axes fraction', fontsize=12)\n",
    "plt.annotate(f'Max: {round(thalach_max, 2)}', xy=(0.67, 0.8), xycoords='axes fraction', fontsize=12)\n",
    "plt.annotate(f'Std: {round(thalach_std, 2)}', xy=(0.67, 0.75), xycoords='axes fraction', fontsize=12)\n",
    "ticks = np.arange(70, 211, 10).tolist()\n",
    "plt.xticks(ticks)\n",
    "plt.xlabel('Maximum heart rate')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Number of patients</th>\n",
       "      <th>Percentage, %</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>&lt;= 100</th>\n",
       "      <td>8.0</td>\n",
       "      <td>2.69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>101-120</th>\n",
       "      <td>28.0</td>\n",
       "      <td>9.43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>121-140</th>\n",
       "      <td>54.0</td>\n",
       "      <td>18.18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>141-160</th>\n",
       "      <td>99.0</td>\n",
       "      <td>33.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>161-180</th>\n",
       "      <td>90.0</td>\n",
       "      <td>30.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>&gt; 180</th>\n",
       "      <td>18.0</td>\n",
       "      <td>6.06</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Number of patients  Percentage, %\n",
       "<= 100                  8.0           2.69\n",
       "101-120                28.0           9.43\n",
       "121-140                54.0          18.18\n",
       "141-160                99.0          33.33\n",
       "161-180                90.0          30.30\n",
       "> 180                  18.0           6.06"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "thalach_100 = (dataset['thalach']<=100).sum()\n",
    "thalach_100_120 = ((dataset['thalach']<=120).sum() - thalach_100).sum()\n",
    "thalach_120_140 = ((dataset['thalach']<=140).sum() - thalach_100 - thalach_100_120).sum()\n",
    "thalach_140_160 = ((dataset['thalach']<=160).sum() - thalach_100 - thalach_100_120 - thalach_120_140).sum()\n",
    "thalach_160_180 = ((dataset['thalach']<=180).sum() - thalach_100 - thalach_100_120 - thalach_120_140 - thalach_140_160).sum()\n",
    "thalach_180 = (dataset['thalach']>180).sum()\n",
    "pct_100 = thalach_100/dataset.shape[0]*100\n",
    "pct_100_120 = thalach_100_120/dataset.shape[0]*100\n",
    "pct_120_140 = thalach_120_140/dataset.shape[0]*100\n",
    "pct_140_160 = thalach_140_160/dataset.shape[0]*100\n",
    "pct_160_180 = thalach_160_180/dataset.shape[0]*100\n",
    "pct_180 = thalach_180/dataset.shape[0]*100\n",
    "\n",
    "table_thalach = pd.DataFrame({\n",
    "        '<= 100': [thalach_100, pct_100],\n",
    "        '101-120': [thalach_100_120, pct_100_120],\n",
    "        '121-140': [thalach_120_140, pct_120_140],\n",
    "        '141-160': [thalach_140_160, pct_140_160],\n",
    "        '161-180': [thalach_160_180, pct_160_180],\n",
    "        '> 180': [thalach_180, pct_180],\n",
    "    }, index = ['Number of patients', 'Percentage, %']).T.round(2)\n",
    "table_thalach"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "99.99"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "table_thalach['Percentage, %'].sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1.9. Exercise induced angina (exang)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0    200\n",
       "1.0     97\n",
       "Name: exang, dtype: int64"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset['exang'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.3266, 0.6734)"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "exang_1 = ((dataset['exang']==1).sum()/dataset.shape[0]).round(4)\n",
    "exang_0 = ((dataset['exang']==0).sum()/dataset.shape[0]).round(4)\n",
    "exang_1, exang_0"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1.10. ST depression induced by exercise relative to rest (oldpeak)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "oldpeak_min = dataset['oldpeak'].min()\n",
    "oldpeak_mean = dataset['oldpeak'].mean()\n",
    "oldpeak_median = dataset['oldpeak'].median()\n",
    "oldpeak_max = dataset['oldpeak'].max()\n",
    "oldpeak_std = dataset['oldpeak'].std()\n",
    "\n",
    "dataset['oldpeak'].plot.hist(bins=50, figsize=(8, 4), title='ST depression induced by exercise relative to rest', color='violet')\n",
    "plt.axvline(oldpeak_mean, ls='-', lw=2, color='purple')\n",
    "plt.axvline(oldpeak_median, ls='--', lw=2, color='purple')\n",
    "plt.annotate(f'Min: {round(oldpeak_min, 2)}', xy=(0.67, 0.95), xycoords='axes fraction', fontsize=12)\n",
    "plt.annotate(f'Mean: {round(oldpeak_mean, 2)} (solid)', xy=(0.67, 0.9), xycoords='axes fraction', fontsize=12)\n",
    "plt.annotate(f'Median: {round(oldpeak_median, 2)} (dashed)', xy=(0.67, 0.85), xycoords='axes fraction', fontsize=12)\n",
    "plt.annotate(f'Max: {round(oldpeak_max, 2)}', xy=(0.67, 0.8), xycoords='axes fraction', fontsize=12)\n",
    "plt.annotate(f'Std: {round(oldpeak_std, 2)}', xy=(0.67, 0.75), xycoords='axes fraction', fontsize=12)\n",
    "ticks = np.arange(0, 6.6, 0.5).tolist()\n",
    "plt.xticks(ticks)\n",
    "plt.xlabel('ST depression induced by exercise relative to rest')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Number of patients</th>\n",
       "      <th>Percentage, %</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>96.0</td>\n",
       "      <td>32.32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0-1</th>\n",
       "      <td>78.0</td>\n",
       "      <td>26.26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1-2</th>\n",
       "      <td>73.0</td>\n",
       "      <td>24.58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2-3</th>\n",
       "      <td>30.0</td>\n",
       "      <td>10.10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>&gt; 3</th>\n",
       "      <td>20.0</td>\n",
       "      <td>6.73</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Number of patients  Percentage, %\n",
       "0                  96.0          32.32\n",
       "0-1                78.0          26.26\n",
       "1-2                73.0          24.58\n",
       "2-3                30.0          10.10\n",
       "> 3                20.0           6.73"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "oldpeak_0 = (dataset['oldpeak']<=0).sum()\n",
    "oldpeak_1 = ((dataset['oldpeak']<=1).sum() - oldpeak_0).sum()\n",
    "oldpeak_1_2 = ((dataset['oldpeak']<=2).sum() - oldpeak_0 - oldpeak_1).sum()\n",
    "oldpeak_2_3 = ((dataset['oldpeak']<=3).sum() - oldpeak_0 - oldpeak_1 - oldpeak_1_2).sum()\n",
    "oldpeak_3 = (dataset['oldpeak']>3).sum()\n",
    "pct_0 = oldpeak_0/dataset.shape[0]*100\n",
    "pct_1 = oldpeak_1/dataset.shape[0]*100\n",
    "pct_1_2 = oldpeak_1_2/dataset.shape[0]*100\n",
    "pct_2_3 = oldpeak_2_3/dataset.shape[0]*100\n",
    "pct_3 = oldpeak_3/dataset.shape[0]*100\n",
    "\n",
    "table_oldpeak = pd.DataFrame({\n",
    "        '0': [oldpeak_0, pct_0],\n",
    "        '0-1': [oldpeak_1, pct_1],\n",
    "        '1-2': [oldpeak_1_2, pct_1_2],\n",
    "        '2-3': [oldpeak_2_3, pct_2_3],\n",
    "        '> 3': [oldpeak_3, pct_3]\n",
    "    }, index = ['Number of patients', 'Percentage, %']).T.round(2)\n",
    "table_oldpeak"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "99.99"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "table_oldpeak['Percentage, %'].sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1.11. Slope of the peak exercise ST segment (slope)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Number of patients</th>\n",
       "      <th>Percentage, %</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Up-sloping</th>\n",
       "      <td>139.0</td>\n",
       "      <td>46.80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Flat</th>\n",
       "      <td>137.0</td>\n",
       "      <td>46.13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Down-sloping</th>\n",
       "      <td>21.0</td>\n",
       "      <td>7.07</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Number of patients  Percentage, %\n",
       "Up-sloping                 139.0          46.80\n",
       "Flat                       137.0          46.13\n",
       "Down-sloping                21.0           7.07"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "slope_1 = (dataset['slope']==1).sum()\n",
    "slope_2 = (dataset['slope']==2).sum()\n",
    "slope_3 = (dataset['slope']==3).sum()\n",
    "pct_slope_1 = slope_1/dataset.shape[0]*100\n",
    "pct_slope_2 = slope_2/dataset.shape[0]*100\n",
    "pct_slope_3 = slope_3/dataset.shape[0]*100\n",
    "\n",
    "table_slope = pd.DataFrame({\n",
    "        'Up-sloping': [slope_1, pct_slope_1],\n",
    "        'Flat': [slope_2, pct_slope_2],\n",
    "        'Down-sloping': [slope_3, pct_slope_3]\n",
    "    }, index = ['Number of patients', 'Percentage, %']).T.round(2)\n",
    "table_slope"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "100.0"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "table_slope['Percentage, %'].sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "table_slope['Number of patients'].plot.bar(title='Slope of the peak exercise ST segment', legend=False, color='crimson', figsize=(6, 4))\n",
    "plt.ylabel('Number of patients')\n",
    "plt.xticks(rotation=0)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1.12. Number of major vessels colored by fluoroscopy (ca)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Number of patients</th>\n",
       "      <th>Percentage, %</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>174.0</td>\n",
       "      <td>58.59</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>65.0</td>\n",
       "      <td>21.89</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>38.0</td>\n",
       "      <td>12.79</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>20.0</td>\n",
       "      <td>6.73</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Number of patients  Percentage, %\n",
       "0               174.0          58.59\n",
       "1                65.0          21.89\n",
       "2                38.0          12.79\n",
       "3                20.0           6.73"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ca_0 = (dataset['ca']==0).sum()\n",
    "ca_1 = (dataset['ca']==1).sum()\n",
    "ca_2 = (dataset['ca']==2).sum()\n",
    "ca_3 = (dataset['ca']==3).sum()\n",
    "pct_ca_0 = ca_0/dataset.shape[0]*100\n",
    "pct_ca_1 = ca_1/dataset.shape[0]*100\n",
    "pct_ca_2 = ca_2/dataset.shape[0]*100\n",
    "pct_ca_3 = ca_3/dataset.shape[0]*100\n",
    "\n",
    "table_ca = pd.DataFrame({\n",
    "        '0': [ca_0, pct_ca_0],\n",
    "        '1': [ca_1, pct_ca_1],\n",
    "        '2': [ca_2, pct_ca_2],\n",
    "        '3': [ca_3, pct_ca_3]\n",
    "    }, index = ['Number of patients', 'Percentage, %']).T.round(2)\n",
    "table_ca"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "100.00000000000001"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "table_ca['Percentage, %'].sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "table_ca['Number of patients'].plot.bar(title='Number of major vessels colored by fluoroscopy', legend=False, color='magenta', figsize=(6, 4))\n",
    "plt.ylabel('Number of patients')\n",
    "plt.xlabel('Number of colored vessels')\n",
    "plt.xticks(rotation=0)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1.13. Defect type (thal)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Number of patients</th>\n",
       "      <th>Percentage, %</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Normal defect</th>\n",
       "      <td>164.0</td>\n",
       "      <td>55.22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fixed defect</th>\n",
       "      <td>18.0</td>\n",
       "      <td>6.06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Reversable defect</th>\n",
       "      <td>115.0</td>\n",
       "      <td>38.72</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   Number of patients  Percentage, %\n",
       "Normal defect                   164.0          55.22\n",
       "Fixed defect                     18.0           6.06\n",
       "Reversable defect               115.0          38.72"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "thal_3 = (dataset['thal']==3).sum()\n",
    "thal_6 = (dataset['thal']==6).sum()\n",
    "thal_7 = (dataset['thal']==7).sum()\n",
    "pct_thal_3 = thal_3/dataset.shape[0]*100\n",
    "pct_thal_6 = thal_6/dataset.shape[0]*100\n",
    "pct_thal_7 = thal_7/dataset.shape[0]*100\n",
    "\n",
    "table_thal = pd.DataFrame({\n",
    "        'Normal defect': [thal_3, pct_thal_3],\n",
    "        'Fixed defect': [thal_6, pct_thal_6],\n",
    "        'Reversable defect': [thal_7, pct_thal_7]\n",
    "    }, index = ['Number of patients', 'Percentage, %']).T.round(2)\n",
    "table_thal"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "100.0"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "table_thal['Percentage, %'].sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "table_thal['Number of patients'].plot.bar(title='Defect type', legend=False, color='deepskyblue', figsize=(6, 4))\n",
    "plt.ylabel('Number of patients')\n",
    "plt.xticks(rotation=0)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Binary classification"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.1. Decision Trees"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>sex</th>\n",
       "      <th>cp</th>\n",
       "      <th>trestbps</th>\n",
       "      <th>chol</th>\n",
       "      <th>fbs</th>\n",
       "      <th>restecg</th>\n",
       "      <th>thalach</th>\n",
       "      <th>exang</th>\n",
       "      <th>oldpeak</th>\n",
       "      <th>slope</th>\n",
       "      <th>ca</th>\n",
       "      <th>thal</th>\n",
       "      <th>class</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>63.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>145.0</td>\n",
       "      <td>233.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>150.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.3</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>67.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>160.0</td>\n",
       "      <td>286.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>108.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.5</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>67.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>120.0</td>\n",
       "      <td>229.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>129.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.6</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>37.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>130.0</td>\n",
       "      <td>250.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>187.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.5</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>41.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>130.0</td>\n",
       "      <td>204.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>172.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    age  sex   cp  trestbps   chol  fbs  restecg  thalach  exang  oldpeak  \\\n",
       "0  63.0  1.0  1.0     145.0  233.0  1.0      2.0    150.0    0.0      2.3   \n",
       "1  67.0  1.0  4.0     160.0  286.0  0.0      2.0    108.0    1.0      1.5   \n",
       "2  67.0  1.0  4.0     120.0  229.0  0.0      2.0    129.0    1.0      2.6   \n",
       "3  37.0  1.0  3.0     130.0  250.0  0.0      0.0    187.0    0.0      3.5   \n",
       "4  41.0  0.0  2.0     130.0  204.0  0.0      2.0    172.0    0.0      1.4   \n",
       "\n",
       "   slope   ca  thal  class  \n",
       "0    3.0  0.0   6.0      0  \n",
       "1    2.0  3.0   3.0      2  \n",
       "2    2.0  2.0   7.0      1  \n",
       "3    3.0  0.0   3.0      0  \n",
       "4    1.0  0.0   3.0      0  "
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "binary_dataset = dataset\n",
    "binary_dataset.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>sex</th>\n",
       "      <th>cp</th>\n",
       "      <th>trestbps</th>\n",
       "      <th>chol</th>\n",
       "      <th>fbs</th>\n",
       "      <th>restecg</th>\n",
       "      <th>thalach</th>\n",
       "      <th>exang</th>\n",
       "      <th>oldpeak</th>\n",
       "      <th>slope</th>\n",
       "      <th>ca</th>\n",
       "      <th>thal</th>\n",
       "      <th>class</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>63.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>145.0</td>\n",
       "      <td>233.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>150.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.3</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>67.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>160.0</td>\n",
       "      <td>286.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>108.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.5</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>67.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>120.0</td>\n",
       "      <td>229.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>129.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.6</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>37.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>130.0</td>\n",
       "      <td>250.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>187.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.5</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>41.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>130.0</td>\n",
       "      <td>204.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>172.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    age  sex   cp  trestbps   chol  fbs  restecg  thalach  exang  oldpeak  \\\n",
       "0  63.0  1.0  1.0     145.0  233.0  1.0      2.0    150.0    0.0      2.3   \n",
       "1  67.0  1.0  4.0     160.0  286.0  0.0      2.0    108.0    1.0      1.5   \n",
       "2  67.0  1.0  4.0     120.0  229.0  0.0      2.0    129.0    1.0      2.6   \n",
       "3  37.0  1.0  3.0     130.0  250.0  0.0      0.0    187.0    0.0      3.5   \n",
       "4  41.0  0.0  2.0     130.0  204.0  0.0      2.0    172.0    0.0      1.4   \n",
       "\n",
       "   slope   ca  thal  class  \n",
       "0    3.0  0.0   6.0      0  \n",
       "1    2.0  3.0   3.0      1  \n",
       "2    2.0  2.0   7.0      1  \n",
       "3    3.0  0.0   3.0      0  \n",
       "4    1.0  0.0   3.0      0  "
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "binary_dataset['class'] = binary_dataset['class'].replace(to_replace=2, value=1)\n",
    "binary_dataset['class'] = binary_dataset['class'].replace(to_replace=3, value=1)\n",
    "binary_dataset['class'] = binary_dataset['class'].replace(to_replace=4, value=1)\n",
    "binary_dataset.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    160\n",
       "1    137\n",
       "Name: class, dtype: int64"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "binary_dataset['class'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = binary_dataset.drop(['class'], axis=1)\n",
    "y = binary_dataset[['class']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>sex</th>\n",
       "      <th>cp</th>\n",
       "      <th>trestbps</th>\n",
       "      <th>chol</th>\n",
       "      <th>fbs</th>\n",
       "      <th>restecg</th>\n",
       "      <th>thalach</th>\n",
       "      <th>exang</th>\n",
       "      <th>oldpeak</th>\n",
       "      <th>slope</th>\n",
       "      <th>ca</th>\n",
       "      <th>thal</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>63.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>145.0</td>\n",
       "      <td>233.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>150.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.3</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>67.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>160.0</td>\n",
       "      <td>286.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>108.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.5</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>67.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>120.0</td>\n",
       "      <td>229.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>129.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.6</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>37.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>130.0</td>\n",
       "      <td>250.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>187.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.5</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>41.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>130.0</td>\n",
       "      <td>204.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>172.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    age  sex   cp  trestbps   chol  fbs  restecg  thalach  exang  oldpeak  \\\n",
       "0  63.0  1.0  1.0     145.0  233.0  1.0      2.0    150.0    0.0      2.3   \n",
       "1  67.0  1.0  4.0     160.0  286.0  0.0      2.0    108.0    1.0      1.5   \n",
       "2  67.0  1.0  4.0     120.0  229.0  0.0      2.0    129.0    1.0      2.6   \n",
       "3  37.0  1.0  3.0     130.0  250.0  0.0      0.0    187.0    0.0      3.5   \n",
       "4  41.0  0.0  2.0     130.0  204.0  0.0      2.0    172.0    0.0      1.4   \n",
       "\n",
       "   slope   ca  thal  \n",
       "0    3.0  0.0   6.0  \n",
       "1    2.0  3.0   3.0  \n",
       "2    2.0  2.0   7.0  \n",
       "3    3.0  0.0   3.0  \n",
       "4    1.0  0.0   3.0  "
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>class</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   class\n",
       "0      0\n",
       "1      1\n",
       "2      1\n",
       "3      0\n",
       "4      0"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Dividing the dataset into a train and a test set (test set size is 20%)\n",
    "# random_state=42: to be able to have reproduce results (controls the shuffling applied to the data \n",
    "# before applying the split)\n",
    "# stratify=y: the train and test sets will have same proportion of classes\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y, test_size=0.20, random_state=42)\n",
    "\n",
    "# Selecting a validation set from the train set (validation set size is 10% of the whole data set, \n",
    "# meaning that its size from the train set is 12.5%)\n",
    "\n",
    "X_train, X_valid, y_train, y_valid = train_test_split(X_train, y_train, stratify=y_train, test_size=0.125, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>sex</th>\n",
       "      <th>cp</th>\n",
       "      <th>trestbps</th>\n",
       "      <th>chol</th>\n",
       "      <th>fbs</th>\n",
       "      <th>restecg</th>\n",
       "      <th>thalach</th>\n",
       "      <th>exang</th>\n",
       "      <th>oldpeak</th>\n",
       "      <th>slope</th>\n",
       "      <th>ca</th>\n",
       "      <th>thal</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>64.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>110.0</td>\n",
       "      <td>211.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>144.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.8</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>61.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>150.0</td>\n",
       "      <td>243.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>137.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>40.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>110.0</td>\n",
       "      <td>167.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>114.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>227</th>\n",
       "      <td>52.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>136.0</td>\n",
       "      <td>196.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>169.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>82</th>\n",
       "      <td>39.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>140.0</td>\n",
       "      <td>321.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>182.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      age  sex   cp  trestbps   chol  fbs  restecg  thalach  exang  oldpeak  \\\n",
       "20   64.0  1.0  1.0     110.0  211.0  0.0      2.0    144.0    1.0      1.8   \n",
       "39   61.0  1.0  3.0     150.0  243.0  1.0      0.0    137.0    1.0      1.0   \n",
       "29   40.0  1.0  4.0     110.0  167.0  0.0      2.0    114.0    1.0      2.0   \n",
       "227  52.0  0.0  3.0     136.0  196.0  0.0      2.0    169.0    0.0      0.1   \n",
       "82   39.0  1.0  3.0     140.0  321.0  0.0      2.0    182.0    0.0      0.0   \n",
       "\n",
       "     slope   ca  thal  \n",
       "20     2.0  0.0   3.0  \n",
       "39     2.0  0.0   3.0  \n",
       "29     2.0  0.0   7.0  \n",
       "227    2.0  0.0   3.0  \n",
       "82     1.0  0.0   3.0  "
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "207"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(X_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "30"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(X_valid)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "60"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.696969696969697"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Checking proportions: the train set is 70%\n",
    "\n",
    "len(X_train)/(len(X_train)+len(X_valid)+len(X_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.10101010101010101"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Checking proportions: the validation set is 10%\n",
    "\n",
    "len(X_valid)/(len(X_train)+len(X_valid)+len(X_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.20202020202020202"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Checking proportions: the test set is 20%\n",
    "\n",
    "len(X_test)/(len(X_train)+len(X_valid)+len(X_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    112\n",
       "1     95\n",
       "Name: class, dtype: int64"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train['class'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    16\n",
       "1    14\n",
       "Name: class, dtype: int64"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_valid['class'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    32\n",
       "1    28\n",
       "Name: class, dtype: int64"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test['class'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Scores on the train set\n",
    "acc_train_list, tpr_train_list, precision_train_list, = [], [], []       \n",
    "\n",
    "# Scores on the validation set\n",
    "acc_valid_list, tpr_valid_list, precision_valid_list = [], [], []\n",
    "\n",
    "# Scores on the test set\n",
    "acc_test_list, tpr_test_list, precision_test_list = [], [], []\n",
    "\n",
    "depth = range(1, 11)\n",
    "\n",
    "for d in depth: \n",
    "    # Define and train a model    \n",
    "    clf = DecisionTreeClassifier(criterion='entropy', max_depth=d, random_state=0)\n",
    "    clf.fit(X_train, y_train)\n",
    "    \n",
    "    # Predictions and scores on the train set\n",
    "    y_pred_train = pd.DataFrame(clf.predict(X_train))\n",
    "    acc_train = clf.score(X_train, y_train)\n",
    "    # pos_label=1 by default (the class that is reported)\n",
    "    tpr_train = recall_score(y_train, y_pred_train)\n",
    "    # pos_label=1 by default (the class that is reported)\n",
    "    precision_train = precision_score(y_train, y_pred_train)\n",
    "   \n",
    "    # Saving results for the train set\n",
    "    acc_train_list.append(acc_train)\n",
    "    tpr_train_list.append(tpr_train)\n",
    "    precision_train_list.append(precision_train)\n",
    "    \n",
    "    # Predictions and scores on the validation set\n",
    "    y_pred_valid = pd.DataFrame(clf.predict(X_valid))\n",
    "    acc_valid = clf.score(X_valid, y_valid)\n",
    "    tpr_valid = recall_score(y_valid, y_pred_valid)   \n",
    "    precision_valid = precision_score(y_valid, y_pred_valid)\n",
    "    \n",
    "    # Saving results for the validation set\n",
    "    acc_valid_list.append(acc_valid)\n",
    "    tpr_valid_list.append(tpr_valid)\n",
    "    precision_valid_list.append(precision_valid)\n",
    "    \n",
    "    # Predictions and scores on the test set\n",
    "    y_pred_test = pd.DataFrame(clf.predict(X_test))\n",
    "    acc_test = clf.score(X_test, y_test)\n",
    "    tpr_test = recall_score(y_test, y_pred_test)\n",
    "    precision_test = precision_score(y_test, y_pred_test)\n",
    "    \n",
    "    # Saving results for the test set\n",
    "    acc_test_list.append(acc_test)\n",
    "    tpr_test_list.append(tpr_test)\n",
    "    precision_test_list.append(precision_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Accuracy on validation set</th>\n",
       "      <th>Recall on validation set</th>\n",
       "      <th>Precision on validation set</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Tree depth</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.733333</td>\n",
       "      <td>0.714286</td>\n",
       "      <td>0.714286</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.600000</td>\n",
       "      <td>0.357143</td>\n",
       "      <td>0.625000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.733333</td>\n",
       "      <td>0.785714</td>\n",
       "      <td>0.687500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.733333</td>\n",
       "      <td>0.785714</td>\n",
       "      <td>0.687500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.766667</td>\n",
       "      <td>0.785714</td>\n",
       "      <td>0.733333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0.766667</td>\n",
       "      <td>0.785714</td>\n",
       "      <td>0.733333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0.733333</td>\n",
       "      <td>0.785714</td>\n",
       "      <td>0.687500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0.733333</td>\n",
       "      <td>0.785714</td>\n",
       "      <td>0.687500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0.733333</td>\n",
       "      <td>0.785714</td>\n",
       "      <td>0.687500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>0.733333</td>\n",
       "      <td>0.785714</td>\n",
       "      <td>0.687500</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            Accuracy on validation set  Recall on validation set  \\\n",
       "Tree depth                                                         \n",
       "1                             0.733333                  0.714286   \n",
       "2                             0.600000                  0.357143   \n",
       "3                             0.733333                  0.785714   \n",
       "4                             0.733333                  0.785714   \n",
       "5                             0.766667                  0.785714   \n",
       "6                             0.766667                  0.785714   \n",
       "7                             0.733333                  0.785714   \n",
       "8                             0.733333                  0.785714   \n",
       "9                             0.733333                  0.785714   \n",
       "10                            0.733333                  0.785714   \n",
       "\n",
       "            Precision on validation set  \n",
       "Tree depth                               \n",
       "1                              0.714286  \n",
       "2                              0.625000  \n",
       "3                              0.687500  \n",
       "4                              0.687500  \n",
       "5                              0.733333  \n",
       "6                              0.733333  \n",
       "7                              0.687500  \n",
       "8                              0.687500  \n",
       "9                              0.687500  \n",
       "10                             0.687500  "
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Results for the validation set\n",
    "\n",
    "binary_results_dt = pd.DataFrame({'Tree depth': depth,\n",
    "                              'Accuracy on validation set': acc_valid_list,\n",
    "                              'Recall on validation set': tpr_valid_list,\n",
    "                              'Precision on validation set': precision_valid_list}).set_index(['Tree depth'])\n",
    "binary_results_dt\n",
    "\n",
    "# binary_results_dt.to_excel('binary_results_dt.xlsx', index =True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x216 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plots for the validation scores\n",
    "\n",
    "plt.figure(figsize=(6, 3))\n",
    "plt.grid(ls='--')\n",
    "plt.title('Scores on the validation set (binary)')\n",
    "plt.xlabel('Depth of a tree')\n",
    "plt.plot(depth, acc_valid_list, color = 'red')\n",
    "plt.plot(depth, tpr_valid_list, color = 'blue')\n",
    "plt.plot(depth, precision_valid_list, color = 'orange')\n",
    "plt.legend(['Accuracy', 'Recall', 'Precision'])\n",
    "ticks = np.arange(1, 11, 1).tolist()\n",
    "plt.xticks(ticks)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Validation set</th>\n",
       "      <th>Train set</th>\n",
       "      <th>Test set</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Accuracy</th>\n",
       "      <td>0.733333</td>\n",
       "      <td>0.864734</td>\n",
       "      <td>0.850000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Recall</th>\n",
       "      <td>0.785714</td>\n",
       "      <td>0.810526</td>\n",
       "      <td>0.750000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Precision</th>\n",
       "      <td>0.687500</td>\n",
       "      <td>0.885057</td>\n",
       "      <td>0.913043</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Validation set  Train set  Test set\n",
       "Accuracy         0.733333   0.864734  0.850000\n",
       "Recall           0.785714   0.810526  0.750000\n",
       "Precision        0.687500   0.885057  0.913043"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# From the table and plots above we can see that the highest recall score (TP/P) for the validation set we get already \n",
    "# with the depth of 3\n",
    "\n",
    "d_max = 3\n",
    "\n",
    "binary_final_dt = pd.DataFrame({'Validation set': [acc_valid_list[d_max-1], tpr_valid_list[d_max-1], precision_valid_list[d_max-1]],\n",
    "                              'Train set': [acc_train_list[d_max-1], tpr_train_list[d_max-1], precision_train_list[d_max-1]],\n",
    "                              'Test set': [acc_test_list[d_max-1], tpr_test_list[d_max-1], precision_test_list[d_max-1]]\n",
    "                              }).set_axis(['Accuracy', 'Recall', 'Precision'], axis=0)\n",
    "binary_final_dt\n",
    "\n",
    "# binary_final_dt.to_excel('binary_final_dt.xlsx', index =True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [],
   "source": [
    "final_clf = DecisionTreeClassifier(criterion='entropy', max_depth=d_max, random_state=0)\n",
    "final_clf.fit(X_train, y_train)\n",
    "y_pred_test = pd.DataFrame(final_clf.predict(X_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "features = ['age', 'sex', 'cp', 'trestbps', 'chol', 'fbs', 'restecg', 'thalach', 'exang', 'oldpeak', 'slope', 'ca', 'thal']\n",
    "classes = ['0', '1']\n",
    "\n",
    "plt.figure(figsize=(15, 8))\n",
    "plot_tree(final_clf, filled = True, rounded = True, feature_names = features, class_names = classes)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      " \n",
      " Classification report \n",
      "\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.81      0.94      0.87        32\n",
      "           1       0.91      0.75      0.82        28\n",
      "\n",
      "    accuracy                           0.85        60\n",
      "   macro avg       0.86      0.84      0.85        60\n",
      "weighted avg       0.86      0.85      0.85        60\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(\"\\n \\n Classification report \\n\\n\", classification_report(y_test, y_pred_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 720x576 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "cm = confusion_matrix(y_test, y_pred_test, labels=final_clf.classes_)\n",
    "disp = ConfusionMatrixDisplay(confusion_matrix=cm,\n",
    "                               display_labels=final_clf.classes_)\n",
    "plt.figure(figsize=(10, 8))\n",
    "disp.plot()\n",
    "plt.show()\n",
    "\n",
    "# Accuracy: (TP+TN)/All\n",
    "# Precision (TP/PP): true 1s that match with true predicted 1s / all predicted 1s (PP - vertical)\n",
    "# Recall (TP/P): true 1s that match with true predicted 1s / all true 1s (P - horizontal)\n",
    "# F1-score is a measure of a model's accuracy on a dataset. It is a way of combining the precision and recall of the model, \n",
    "# and it is defined as the harmonic mean of the model's precision and recall, 2*precision*recall/(precision+recall)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.2. Random Forest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestClassifier()"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "RandomForestClassifier()\n",
    "# Default parameters:\n",
    "# n_estimators=100, criterion='gini', max_depth=None, min_samples_split=2, min_samples_leaf=1,\n",
    "# min_weight_fraction_leaf=0.0, max_features='auto', max_leaf_nodes=None, min_impurity_decrease=0.0,\n",
    "# min_impurity_split=None, bootstrap=True, oob_score=False, n_jobs=None, random_state=None, verbose=0, warm_start=False, \n",
    "# class_weight=None, ccp_alpha=0.0, max_samples=None\n",
    "\n",
    "# Important parameters: n_estimators=100: number of trees that the algorithm generates,\n",
    "# bootstrap=True, max_features and max_depth"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y, test_size=0.20, random_state=42)\n",
    "\n",
    "X_train, X_valid, y_train, y_valid = train_test_split(X_train, y_train, stratify=y_train, test_size=0.125, random_state=42)\n",
    "\n",
    "y_train = np.ravel(y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [],
   "source": [
    "# First, model with max_depth=5\n",
    "\n",
    "# Scores on the train set\n",
    "acc_train_list, tpr_train_list, precision_train_list, = [], [], []    # TPR = recall        \n",
    "\n",
    "# Scores on the validation set\n",
    "acc_valid_list, tpr_valid_list, precision_valid_list = [], [], []\n",
    "\n",
    "# Scores on the test set\n",
    "acc_test_list, tpr_test_list, precision_test_list = [], [], []\n",
    "\n",
    "for i in range(1, 14): # Because we have 13 features      \n",
    "    # Define and train a model    \n",
    "    clf = RandomForestClassifier(criterion='entropy', max_depth=5, max_features=i, random_state=7)\n",
    "    clf.fit(X_train, y_train)\n",
    "    \n",
    "    # Predictions and scores on the train set\n",
    "    y_pred_train = pd.DataFrame(clf.predict(X_train))\n",
    "    acc_train = clf.score(X_train, y_train)\n",
    "    # pos_label=1 by default (the class that is reported)\n",
    "    tpr_train = recall_score(y_train, y_pred_train)\n",
    "    # pos_label=1 by default (the class that is reported)\n",
    "    precision_train = precision_score(y_train, y_pred_train)\n",
    "   \n",
    "    # Saving results \n",
    "    acc_train_list.append(acc_train)\n",
    "    tpr_train_list.append(tpr_train)\n",
    "    precision_train_list.append(precision_train)\n",
    "    \n",
    "    # Predictions and scores on the valid set\n",
    "    y_pred_valid = pd.DataFrame(clf.predict(X_valid))\n",
    "    acc_valid = clf.score(X_valid, y_valid)\n",
    "    tpr_valid = recall_score(y_valid, y_pred_valid)   \n",
    "    precision_valid = precision_score(y_valid, y_pred_valid)\n",
    "    \n",
    "    # Saving results \n",
    "    acc_valid_list.append(acc_valid)\n",
    "    tpr_valid_list.append(tpr_valid)\n",
    "    precision_valid_list.append(precision_valid)\n",
    "    \n",
    "    # Predictions and scores on the test set\n",
    "    y_pred_test = pd.DataFrame(clf.predict(X_test))\n",
    "    acc_test = clf.score(X_test, y_test)\n",
    "    tpr_test = recall_score(y_test, y_pred_test)\n",
    "    precision_test = precision_score(y_test, y_pred_test)\n",
    "    \n",
    "    # Saving results \n",
    "    acc_test_list.append(acc_test)\n",
    "    tpr_test_list.append(tpr_test)\n",
    "    precision_test_list.append(precision_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Accuracy on validation set</th>\n",
       "      <th>Recall on validation set</th>\n",
       "      <th>Precision on validation set</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Number of features</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.800000</td>\n",
       "      <td>0.857143</td>\n",
       "      <td>0.750000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.800000</td>\n",
       "      <td>0.857143</td>\n",
       "      <td>0.750000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.766667</td>\n",
       "      <td>0.857143</td>\n",
       "      <td>0.705882</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.766667</td>\n",
       "      <td>0.857143</td>\n",
       "      <td>0.705882</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.733333</td>\n",
       "      <td>0.785714</td>\n",
       "      <td>0.687500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0.733333</td>\n",
       "      <td>0.785714</td>\n",
       "      <td>0.687500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0.733333</td>\n",
       "      <td>0.785714</td>\n",
       "      <td>0.687500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0.733333</td>\n",
       "      <td>0.785714</td>\n",
       "      <td>0.687500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0.733333</td>\n",
       "      <td>0.785714</td>\n",
       "      <td>0.687500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>0.733333</td>\n",
       "      <td>0.785714</td>\n",
       "      <td>0.687500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>0.733333</td>\n",
       "      <td>0.785714</td>\n",
       "      <td>0.687500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>0.733333</td>\n",
       "      <td>0.785714</td>\n",
       "      <td>0.687500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>0.733333</td>\n",
       "      <td>0.785714</td>\n",
       "      <td>0.687500</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    Accuracy on validation set  Recall on validation set  \\\n",
       "Number of features                                                         \n",
       "1                                     0.800000                  0.857143   \n",
       "2                                     0.800000                  0.857143   \n",
       "3                                     0.766667                  0.857143   \n",
       "4                                     0.766667                  0.857143   \n",
       "5                                     0.733333                  0.785714   \n",
       "6                                     0.733333                  0.785714   \n",
       "7                                     0.733333                  0.785714   \n",
       "8                                     0.733333                  0.785714   \n",
       "9                                     0.733333                  0.785714   \n",
       "10                                    0.733333                  0.785714   \n",
       "11                                    0.733333                  0.785714   \n",
       "12                                    0.733333                  0.785714   \n",
       "13                                    0.733333                  0.785714   \n",
       "\n",
       "                    Precision on validation set  \n",
       "Number of features                               \n",
       "1                                      0.750000  \n",
       "2                                      0.750000  \n",
       "3                                      0.705882  \n",
       "4                                      0.705882  \n",
       "5                                      0.687500  \n",
       "6                                      0.687500  \n",
       "7                                      0.687500  \n",
       "8                                      0.687500  \n",
       "9                                      0.687500  \n",
       "10                                     0.687500  \n",
       "11                                     0.687500  \n",
       "12                                     0.687500  \n",
       "13                                     0.687500  "
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Results for the validation set, max_depth=5\n",
    "\n",
    "binary_results_rf_5 = pd.DataFrame({'Number of features': range(1, 14),\n",
    "                              'Accuracy on validation set': acc_valid_list,\n",
    "                              'Recall on validation set': tpr_valid_list,\n",
    "                              'Precision on validation set': precision_valid_list}).set_index(['Number of features'])\n",
    "binary_results_rf_5\n",
    "\n",
    "# binary_results_rf_5.to_excel('binary_results_rf_5.xlsx', index =True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x216 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plots for validation scores, max_depth=5\n",
    "\n",
    "plt.figure(figsize=(6, 3))\n",
    "plt.grid(ls='--')\n",
    "plt.title('Scores on the validation set (binary), depth=5')\n",
    "plt.xlabel('Number of features')\n",
    "plt.plot(range(1, 14), acc_valid_list, color = 'red')\n",
    "plt.plot(range(1, 14), tpr_valid_list, color = 'blue')\n",
    "plt.plot(range(1, 14), precision_valid_list, color = 'orange')\n",
    "plt.legend(['Accuracy', 'Recall', 'Precision'])\n",
    "ticks = np.arange(1, 14, 1).tolist()\n",
    "plt.xticks(ticks)\n",
    "plt.ylim(0.6, 1)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Second, model with max_depth=3\n",
    "\n",
    "# Scores on the train set\n",
    "acc_train_list, tpr_train_list, precision_train_list, = [], [], []    # TPR = recall        \n",
    "\n",
    "# Scores on the validation set\n",
    "acc_valid_list, tpr_valid_list, precision_valid_list = [], [], []\n",
    "\n",
    "# Scores on the test set\n",
    "acc_test_list, tpr_test_list, precision_test_list = [], [], []\n",
    "\n",
    "for i in range(1, 14): # Because we have 13 features      \n",
    "    # Define and train a model    \n",
    "    clf = RandomForestClassifier(criterion='entropy', max_depth=3, max_features=i, random_state=7)\n",
    "    clf.fit(X_train, y_train)\n",
    "    \n",
    "    # Predictions and scores on the train set\n",
    "    y_pred_train = pd.DataFrame(clf.predict(X_train))\n",
    "    acc_train = clf.score(X_train, y_train)\n",
    "    # pos_label=1 by default (the class that is reported)\n",
    "    tpr_train = recall_score(y_train, y_pred_train)\n",
    "    # pos_label=1 by default (the class that is reported)\n",
    "    precision_train = precision_score(y_train, y_pred_train)\n",
    "   \n",
    "    # Saving results \n",
    "    acc_train_list.append(acc_train)\n",
    "    tpr_train_list.append(tpr_train)\n",
    "    precision_train_list.append(precision_train)\n",
    "    \n",
    "    # Predictions and scores on the valid set\n",
    "    y_pred_valid = pd.DataFrame(clf.predict(X_valid))\n",
    "    acc_valid = clf.score(X_valid, y_valid)\n",
    "    tpr_valid = recall_score(y_valid, y_pred_valid)   \n",
    "    precision_valid = precision_score(y_valid, y_pred_valid)\n",
    "    \n",
    "    # Saving results \n",
    "    acc_valid_list.append(acc_valid)\n",
    "    tpr_valid_list.append(tpr_valid)\n",
    "    precision_valid_list.append(precision_valid)\n",
    "    \n",
    "    # Predictions and scores on the test set\n",
    "    y_pred_test = pd.DataFrame(clf.predict(X_test))\n",
    "    acc_test = clf.score(X_test, y_test)\n",
    "    tpr_test = recall_score(y_test, y_pred_test)\n",
    "    precision_test = precision_score(y_test, y_pred_test)\n",
    "    \n",
    "    # Saving results \n",
    "    acc_test_list.append(acc_test)\n",
    "    tpr_test_list.append(tpr_test)\n",
    "    precision_test_list.append(precision_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Accuracy on validation set</th>\n",
       "      <th>Recall on validation set</th>\n",
       "      <th>Precision on validation set</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Number of features</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.833333</td>\n",
       "      <td>0.857143</td>\n",
       "      <td>0.800000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.833333</td>\n",
       "      <td>0.928571</td>\n",
       "      <td>0.764706</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.800000</td>\n",
       "      <td>0.857143</td>\n",
       "      <td>0.750000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.766667</td>\n",
       "      <td>0.857143</td>\n",
       "      <td>0.705882</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.766667</td>\n",
       "      <td>0.857143</td>\n",
       "      <td>0.705882</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0.766667</td>\n",
       "      <td>0.857143</td>\n",
       "      <td>0.705882</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0.766667</td>\n",
       "      <td>0.857143</td>\n",
       "      <td>0.705882</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0.766667</td>\n",
       "      <td>0.857143</td>\n",
       "      <td>0.705882</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0.733333</td>\n",
       "      <td>0.785714</td>\n",
       "      <td>0.687500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>0.733333</td>\n",
       "      <td>0.785714</td>\n",
       "      <td>0.687500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>0.733333</td>\n",
       "      <td>0.785714</td>\n",
       "      <td>0.687500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>0.766667</td>\n",
       "      <td>0.857143</td>\n",
       "      <td>0.705882</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>0.733333</td>\n",
       "      <td>0.785714</td>\n",
       "      <td>0.687500</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    Accuracy on validation set  Recall on validation set  \\\n",
       "Number of features                                                         \n",
       "1                                     0.833333                  0.857143   \n",
       "2                                     0.833333                  0.928571   \n",
       "3                                     0.800000                  0.857143   \n",
       "4                                     0.766667                  0.857143   \n",
       "5                                     0.766667                  0.857143   \n",
       "6                                     0.766667                  0.857143   \n",
       "7                                     0.766667                  0.857143   \n",
       "8                                     0.766667                  0.857143   \n",
       "9                                     0.733333                  0.785714   \n",
       "10                                    0.733333                  0.785714   \n",
       "11                                    0.733333                  0.785714   \n",
       "12                                    0.766667                  0.857143   \n",
       "13                                    0.733333                  0.785714   \n",
       "\n",
       "                    Precision on validation set  \n",
       "Number of features                               \n",
       "1                                      0.800000  \n",
       "2                                      0.764706  \n",
       "3                                      0.750000  \n",
       "4                                      0.705882  \n",
       "5                                      0.705882  \n",
       "6                                      0.705882  \n",
       "7                                      0.705882  \n",
       "8                                      0.705882  \n",
       "9                                      0.687500  \n",
       "10                                     0.687500  \n",
       "11                                     0.687500  \n",
       "12                                     0.705882  \n",
       "13                                     0.687500  "
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Results for the validation set, max_depth=3\n",
    "\n",
    "binary_results_rf_3 = pd.DataFrame({'Number of features': range(1, 14),\n",
    "                              'Accuracy on validation set': acc_valid_list,\n",
    "                              'Recall on validation set': tpr_valid_list,\n",
    "                              'Precision on validation set': precision_valid_list}).set_index(['Number of features'])\n",
    "binary_results_rf_3\n",
    "\n",
    "# binary_results_rf_3.to_excel('binary_results_rf_3.xlsx', index =True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x216 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plots for validation scores, depth=3\n",
    "plt.figure(figsize=(6, 3))\n",
    "plt.grid(ls='--')\n",
    "plt.title('Scores on the validation set (binary), depth=3')\n",
    "plt.xlabel('Number of features')\n",
    "plt.plot(range(1, 14), acc_valid_list, color = 'red')\n",
    "plt.plot(range(1, 14), tpr_valid_list, color = 'blue')\n",
    "plt.plot(range(1, 14), precision_valid_list, color = 'orange')\n",
    "plt.legend(['Accuracy', 'Recall', 'Precision'], loc='upper right')\n",
    "ticks = np.arange(1, 14, 1).tolist()\n",
    "plt.xticks(ticks)\n",
    "plt.ylim(0.6, 1)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Validation set</th>\n",
       "      <th>Train set</th>\n",
       "      <th>Test set</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Accuracy</th>\n",
       "      <td>0.833333</td>\n",
       "      <td>0.874396</td>\n",
       "      <td>0.816667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Recall</th>\n",
       "      <td>0.928571</td>\n",
       "      <td>0.789474</td>\n",
       "      <td>0.714286</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Precision</th>\n",
       "      <td>0.764706</td>\n",
       "      <td>0.925926</td>\n",
       "      <td>0.869565</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Validation set  Train set  Test set\n",
       "Accuracy         0.833333   0.874396  0.816667\n",
       "Recall           0.928571   0.789474  0.714286\n",
       "Precision        0.764706   0.925926  0.869565"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# From the table and plots above we can see that the highest recall score (TP/P) for the validation set we get with depth of 3 \n",
    "# and number of features of 2\n",
    "\n",
    "n_features = 2\n",
    "\n",
    "binary_final_rf = pd.DataFrame({'Validation set': [acc_valid_list[n_features-1], tpr_valid_list[n_features-1], precision_valid_list[n_features-1]],\n",
    "                              'Train set': [acc_train_list[n_features-1], tpr_train_list[n_features-1], precision_train_list[n_features-1]],\n",
    "                              'Test set': [acc_test_list[n_features-1], tpr_test_list[n_features-1], precision_test_list[n_features-1]]\n",
    "                              }).set_axis(['Accuracy', 'Recall', 'Precision'], axis=0)\n",
    "binary_final_rf\n",
    "\n",
    "# binary_final_rf.to_excel('binary_final_rf.xlsx', index =True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [],
   "source": [
    "final_clf = RandomForestClassifier(criterion='entropy', max_depth=3, max_features=2, random_state=7)\n",
    "final_clf.fit(X_train, y_train)\n",
    "y_pred_test = pd.DataFrame(final_clf.predict(X_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Importance binary</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Features</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>thal</th>\n",
       "      <td>0.172347</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cp</th>\n",
       "      <td>0.138727</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ca</th>\n",
       "      <td>0.130112</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>oldpeak</th>\n",
       "      <td>0.117876</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>thalach</th>\n",
       "      <td>0.107599</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>age</th>\n",
       "      <td>0.080650</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>slope</th>\n",
       "      <td>0.060076</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>trestbps</th>\n",
       "      <td>0.046073</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>sex</th>\n",
       "      <td>0.044764</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>chol</th>\n",
       "      <td>0.040391</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>exang</th>\n",
       "      <td>0.040188</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>restecg</th>\n",
       "      <td>0.011156</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fbs</th>\n",
       "      <td>0.010041</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Importance binary\n",
       "Features                   \n",
       "thal               0.172347\n",
       "cp                 0.138727\n",
       "ca                 0.130112\n",
       "oldpeak            0.117876\n",
       "thalach            0.107599\n",
       "age                0.080650\n",
       "slope              0.060076\n",
       "trestbps           0.046073\n",
       "sex                0.044764\n",
       "chol               0.040391\n",
       "exang              0.040188\n",
       "restecg            0.011156\n",
       "fbs                0.010041"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "importance_rf_binary = pd.DataFrame({'Features': X_train.columns,\n",
    "                             'Importance binary': final_clf.feature_importances_}).set_index(['Features']).sort_values('Importance binary', ascending=False)\n",
    "importance_rf_binary\n",
    "\n",
    "# importance_rf_binary.to_excel('importance_rf_binary.xlsx', index =True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "features=X.columns[:]\n",
    "importances = final_clf.feature_importances_\n",
    "indices = np.argsort(importances)\n",
    "\n",
    "plt.figure(figsize=(10, 5))\n",
    "plt.grid(ls='--', axis='x')\n",
    "plt.title('Feature importances, RF binary, depth=3, features=2')\n",
    "plt.barh(range(len(indices)), importances[indices], color='b', align='center')\n",
    "plt.yticks(range(len(indices)), features[indices])\n",
    "plt.xlabel('%, in decimals')\n",
    "ticks = np.arange(0, 0.21, 0.01).tolist()\n",
    "plt.xticks(ticks)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      " \n",
      " Classification report \n",
      "\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.78      0.91      0.84        32\n",
      "           1       0.87      0.71      0.78        28\n",
      "\n",
      "    accuracy                           0.82        60\n",
      "   macro avg       0.83      0.81      0.81        60\n",
      "weighted avg       0.82      0.82      0.81        60\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(\"\\n \\n Classification report \\n\\n\", classification_report(y_test, y_pred_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 720x720 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "cm = confusion_matrix(y_test, y_pred_test, labels=final_clf.classes_)\n",
    "disp = ConfusionMatrixDisplay(confusion_matrix=cm,\n",
    "                               display_labels=final_clf.classes_)\n",
    "plt.figure(figsize=(10, 10))\n",
    "disp.plot()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.3. Binary classification - comparison"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Test set DT</th>\n",
       "      <th>Test set RF</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Accuracy</th>\n",
       "      <td>0.850000</td>\n",
       "      <td>0.816667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Recall</th>\n",
       "      <td>0.750000</td>\n",
       "      <td>0.714286</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Precision</th>\n",
       "      <td>0.913043</td>\n",
       "      <td>0.869565</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Test set DT  Test set RF\n",
       "Accuracy      0.850000     0.816667\n",
       "Recall        0.750000     0.714286\n",
       "Precision     0.913043     0.869565"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "binary_compare = pd.concat([binary_final_dt, binary_final_rf], axis=1).drop(['Validation set', 'Train set'], axis=1).set_axis(['Test set DT', 'Test set RF'], axis=1)\n",
    "binary_compare\n",
    "\n",
    "# binary_compare.to_excel('binary_compare.xlsx', index=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "binary_compare.plot.bar(title = 'Binary classification: DT vs. RF', figsize=(8, 5), color=['violet', 'purple'])\n",
    "plt.xticks(rotation=0)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Multi-class classification"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3.1. Decision Trees"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>sex</th>\n",
       "      <th>cp</th>\n",
       "      <th>trestbps</th>\n",
       "      <th>chol</th>\n",
       "      <th>fbs</th>\n",
       "      <th>restecg</th>\n",
       "      <th>thalach</th>\n",
       "      <th>exang</th>\n",
       "      <th>oldpeak</th>\n",
       "      <th>slope</th>\n",
       "      <th>ca</th>\n",
       "      <th>thal</th>\n",
       "      <th>class</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>63.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>145.0</td>\n",
       "      <td>233.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>150.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.3</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>67.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>160.0</td>\n",
       "      <td>286.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>108.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.5</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>67.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>120.0</td>\n",
       "      <td>229.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>129.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.6</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>37.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>130.0</td>\n",
       "      <td>250.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>187.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.5</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>41.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>130.0</td>\n",
       "      <td>204.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>172.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    age  sex   cp  trestbps   chol  fbs  restecg  thalach  exang  oldpeak  \\\n",
       "0  63.0  1.0  1.0     145.0  233.0  1.0      2.0    150.0    0.0      2.3   \n",
       "1  67.0  1.0  4.0     160.0  286.0  0.0      2.0    108.0    1.0      1.5   \n",
       "2  67.0  1.0  4.0     120.0  229.0  0.0      2.0    129.0    1.0      2.6   \n",
       "3  37.0  1.0  3.0     130.0  250.0  0.0      0.0    187.0    0.0      3.5   \n",
       "4  41.0  0.0  2.0     130.0  204.0  0.0      2.0    172.0    0.0      1.4   \n",
       "\n",
       "   slope   ca  thal  class  \n",
       "0    3.0  0.0   6.0      0  \n",
       "1    2.0  3.0   3.0      2  \n",
       "2    2.0  2.0   7.0      1  \n",
       "3    3.0  0.0   3.0      0  \n",
       "4    1.0  0.0   3.0      0  "
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset = pd.read_csv('HeartDisease.csv')\n",
    "dataset.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = dataset.drop(['class'], axis=1)\n",
    "y = dataset[['class']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>sex</th>\n",
       "      <th>cp</th>\n",
       "      <th>trestbps</th>\n",
       "      <th>chol</th>\n",
       "      <th>fbs</th>\n",
       "      <th>restecg</th>\n",
       "      <th>thalach</th>\n",
       "      <th>exang</th>\n",
       "      <th>oldpeak</th>\n",
       "      <th>slope</th>\n",
       "      <th>ca</th>\n",
       "      <th>thal</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>63.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>145.0</td>\n",
       "      <td>233.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>150.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.3</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>67.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>160.0</td>\n",
       "      <td>286.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>108.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.5</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>67.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>120.0</td>\n",
       "      <td>229.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>129.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.6</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>37.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>130.0</td>\n",
       "      <td>250.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>187.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.5</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>41.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>130.0</td>\n",
       "      <td>204.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>172.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    age  sex   cp  trestbps   chol  fbs  restecg  thalach  exang  oldpeak  \\\n",
       "0  63.0  1.0  1.0     145.0  233.0  1.0      2.0    150.0    0.0      2.3   \n",
       "1  67.0  1.0  4.0     160.0  286.0  0.0      2.0    108.0    1.0      1.5   \n",
       "2  67.0  1.0  4.0     120.0  229.0  0.0      2.0    129.0    1.0      2.6   \n",
       "3  37.0  1.0  3.0     130.0  250.0  0.0      0.0    187.0    0.0      3.5   \n",
       "4  41.0  0.0  2.0     130.0  204.0  0.0      2.0    172.0    0.0      1.4   \n",
       "\n",
       "   slope   ca  thal  \n",
       "0    3.0  0.0   6.0  \n",
       "1    2.0  3.0   3.0  \n",
       "2    2.0  2.0   7.0  \n",
       "3    3.0  0.0   3.0  \n",
       "4    1.0  0.0   3.0  "
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>class</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   class\n",
       "0      0\n",
       "1      2\n",
       "2      1\n",
       "3      0\n",
       "4      0"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 360x216 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Classes are unbalanced\n",
    "\n",
    "plt.figure(figsize=(5, 3))\n",
    "sns.countplot(y.squeeze())\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    160\n",
       "1     54\n",
       "3     35\n",
       "2     35\n",
       "4     13\n",
       "Name: class, dtype: int64"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset['class'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y, test_size=0.20, random_state=1)\n",
    "X_train, X_valid, y_train, y_valid = train_test_split(X_train, y_train, stratify=y_train, test_size=0.125, random_state=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(207, 13)"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(112, 38, 24, 24, 9)"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# We need to know how many datapoints of different classes in the train set (especially number of datapoints of class 0) \n",
    "# for upsampling (oversampling) \n",
    "\n",
    "cl_0 = (y_train['class']==0).sum()\n",
    "cl_1 = (y_train['class']==1).sum()\n",
    "cl_2 = (y_train['class']==2).sum()\n",
    "cl_3 = (y_train['class']==3).sum()\n",
    "cl_4 = (y_train['class']==4).sum()\n",
    "cl_0, cl_1, cl_2, cl_3, cl_4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.5411, 0.1836, 0.1159, 0.1159, 0.0435)"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pct_cl_0 = (y_train['class']==0).sum()/y_train.shape[0]\n",
    "pct_cl_1 = (y_train['class']==1).sum()/y_train.shape[0]\n",
    "pct_cl_2 = (y_train['class']==2).sum()/y_train.shape[0]\n",
    "pct_cl_3 = (y_train['class']==3).sum()/y_train.shape[0]\n",
    "pct_cl_4 = (y_train['class']==4).sum()/y_train.shape[0]\n",
    "pct_cl_0.round(4), pct_cl_1.round(4), pct_cl_2.round(4), pct_cl_3.round(4), pct_cl_4.round(4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(30, 13)"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_valid.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(60, 13)"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [],
   "source": [
    "from imblearn.over_sampling import SMOTE\n",
    "\n",
    "sm = SMOTE(random_state=12, sampling_strategy = {0: 112, 1: 112, 2: 112, 3: 112, 4: 112})\n",
    "X_train, y_train = sm.fit_resample(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(560, 13)"
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(560, 1)"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(112, 112, 112, 112, 112)"
      ]
     },
     "execution_count": 105,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cl_0 = (y_train['class']==0).sum()\n",
    "cl_1 = (y_train['class']==1).sum()\n",
    "cl_2 = (y_train['class']==2).sum()\n",
    "cl_3 = (y_train['class']==3).sum()\n",
    "cl_4 = (y_train['class']==4).sum()\n",
    "cl_0, cl_1, cl_2, cl_3, cl_4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 360x216 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(5, 3))\n",
    "sns.countplot(y_train.squeeze())\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Scores on the train set\n",
    "acc_train_list, tpr_train_list, precision_train_list, = [], [], []   \n",
    "\n",
    "# Scores on the validation set\n",
    "acc_valid_list, tpr_valid_list, precision_valid_list = [], [], []\n",
    "\n",
    "# Scores on the test set\n",
    "acc_test_list, tpr_test_list, precision_test_list = [], [], []\n",
    "\n",
    "depth = range(1, 11)\n",
    "\n",
    "for d in depth: \n",
    "    # Define and train a model    \n",
    "    clf = DecisionTreeClassifier(criterion='entropy', max_depth=d, random_state=15)\n",
    "    clf.fit(X_train, y_train)\n",
    "    \n",
    "    # Predictions and scores on the train set\n",
    "    y_pred_train = pd.DataFrame(clf.predict(X_train))\n",
    "    acc_train = clf.score(X_train, y_train)\n",
    "    # 'macro': calculates metrics for each label, and finds their unweighted mean (each class has the same weight)\n",
    "    # 'micro': each class is weighted according to the number of datapoints in it, it's bad for us, as validation and test sets \n",
    "    # are not balanced\n",
    "    # zero_division=0: just to not get a warning if we have classes with 0 TP\n",
    "    tpr_train = recall_score(y_train, y_pred_train, average='macro', zero_division=0)\n",
    "    precision_train = precision_score(y_train, y_pred_train, average='macro', zero_division=0)\n",
    "   \n",
    "    # Saving results \n",
    "    acc_train_list.append(acc_train)\n",
    "    tpr_train_list.append(tpr_train)\n",
    "    precision_train_list.append(precision_train)\n",
    "    \n",
    "    # Predictions and scores on the valid set\n",
    "    y_pred_valid = pd.DataFrame(clf.predict(X_valid))\n",
    "    acc_valid = clf.score(X_valid, y_valid)\n",
    "    tpr_valid = recall_score(y_valid, y_pred_valid, average='macro', zero_division=0)   \n",
    "    precision_valid = precision_score(y_valid, y_pred_valid, average='macro', zero_division=0)\n",
    "    \n",
    "    # Saving results \n",
    "    acc_valid_list.append(acc_valid)\n",
    "    tpr_valid_list.append(tpr_valid)\n",
    "    precision_valid_list.append(precision_valid)\n",
    "    \n",
    "    # Predictions and scores on the test set\n",
    "    y_pred_test = pd.DataFrame(clf.predict(X_test))\n",
    "    acc_test = clf.score(X_test, y_test)\n",
    "    tpr_test = recall_score(y_test, y_pred_test, average='macro', zero_division=0)\n",
    "    precision_test = precision_score(y_test, y_pred_test, average='macro', zero_division=0)\n",
    "    \n",
    "    # Saving results \n",
    "    acc_test_list.append(acc_test)\n",
    "    tpr_test_list.append(tpr_test)\n",
    "    precision_test_list.append(precision_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Accuracy on validation set</th>\n",
       "      <th>Recall on validation set</th>\n",
       "      <th>Precision on validation set</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Tree depth</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.3750</td>\n",
       "      <td>0.180090</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.466667</td>\n",
       "      <td>0.2775</td>\n",
       "      <td>0.263333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.566667</td>\n",
       "      <td>0.3425</td>\n",
       "      <td>0.313333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.566667</td>\n",
       "      <td>0.3250</td>\n",
       "      <td>0.295556</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.466667</td>\n",
       "      <td>0.2775</td>\n",
       "      <td>0.327143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0.433333</td>\n",
       "      <td>0.2650</td>\n",
       "      <td>0.327706</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0.466667</td>\n",
       "      <td>0.2500</td>\n",
       "      <td>0.221176</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.2625</td>\n",
       "      <td>0.224444</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.2625</td>\n",
       "      <td>0.244444</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>0.466667</td>\n",
       "      <td>0.2500</td>\n",
       "      <td>0.241176</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            Accuracy on validation set  Recall on validation set  \\\n",
       "Tree depth                                                         \n",
       "1                             0.500000                    0.3750   \n",
       "2                             0.466667                    0.2775   \n",
       "3                             0.566667                    0.3425   \n",
       "4                             0.566667                    0.3250   \n",
       "5                             0.466667                    0.2775   \n",
       "6                             0.433333                    0.2650   \n",
       "7                             0.466667                    0.2500   \n",
       "8                             0.500000                    0.2625   \n",
       "9                             0.500000                    0.2625   \n",
       "10                            0.466667                    0.2500   \n",
       "\n",
       "            Precision on validation set  \n",
       "Tree depth                               \n",
       "1                              0.180090  \n",
       "2                              0.263333  \n",
       "3                              0.313333  \n",
       "4                              0.295556  \n",
       "5                              0.327143  \n",
       "6                              0.327706  \n",
       "7                              0.221176  \n",
       "8                              0.224444  \n",
       "9                              0.244444  \n",
       "10                             0.241176  "
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Results for the validation set\n",
    "\n",
    "multiclass_results_dt = pd.DataFrame({'Tree depth': depth,\n",
    "                              'Accuracy on validation set': acc_valid_list,\n",
    "                              'Recall on validation set': tpr_valid_list,\n",
    "                              'Precision on validation set': precision_valid_list}).set_index(['Tree depth'])\n",
    "multiclass_results_dt\n",
    "\n",
    "# multiclass_results_dt.to_excel('multiclass_results_dt.xlsx', index =True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x216 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plots for validation scores\n",
    "\n",
    "plt.figure(figsize=(6, 3))\n",
    "plt.grid(ls='--')\n",
    "plt.title('Scores on the validation set (multiclass)')\n",
    "plt.xlabel('Depth of a tree')\n",
    "plt.plot(depth, acc_valid_list, color = 'red')\n",
    "plt.plot(depth, tpr_valid_list, color = 'blue')\n",
    "plt.plot(depth, precision_valid_list, color = 'orange')\n",
    "plt.legend(['Accuracy', 'Recall', 'Precision'])\n",
    "ticks = np.arange(1, 11, 1).tolist()\n",
    "plt.xticks(ticks)\n",
    "plt.ylim(0.1, 0.6)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Validation set</th>\n",
       "      <th>Train set</th>\n",
       "      <th>Test set</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Accuracy</th>\n",
       "      <td>0.566667</td>\n",
       "      <td>0.557143</td>\n",
       "      <td>0.400000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Recall</th>\n",
       "      <td>0.342500</td>\n",
       "      <td>0.557143</td>\n",
       "      <td>0.268534</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Precision</th>\n",
       "      <td>0.313333</td>\n",
       "      <td>0.626710</td>\n",
       "      <td>0.235866</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Validation set  Train set  Test set\n",
       "Accuracy         0.566667   0.557143  0.400000\n",
       "Recall           0.342500   0.557143  0.268534\n",
       "Precision        0.313333   0.626710  0.235866"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# From the table and plot above we can see that the highest recall score (TP/P) for the validation set we get\n",
    "# with the depth of 3\n",
    "\n",
    "d_max = 3\n",
    "\n",
    "multi_final_dt = pd.DataFrame({'Validation set': [acc_valid_list[d_max-1], tpr_valid_list[d_max-1], precision_valid_list[d_max-1]],\n",
    "                              'Train set': [acc_train_list[d_max-1], tpr_train_list[d_max-1], precision_train_list[d_max-1]],\n",
    "                              'Test set': [acc_test_list[d_max-1], tpr_test_list[d_max-1], precision_test_list[d_max-1]]\n",
    "                              }).set_axis(['Accuracy', 'Recall', 'Precision'], axis=0)\n",
    "multi_final_dt\n",
    "\n",
    "# multi_final_dt.to_excel('multi_final_dt.xlsx', index =True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [],
   "source": [
    "final_clf = DecisionTreeClassifier(criterion='entropy', max_depth=3, random_state=15)\n",
    "final_clf.fit(X_train, y_train)\n",
    "y_pred_test = pd.DataFrame(final_clf.predict(X_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "features = ['age', 'sex', 'cp', 'trestbps', 'chol', 'fbs', 'restecg', 'thalach', 'exang', 'oldpeak', 'slope', 'ca', 'thal']\n",
    "classes = ['0', '1', '2', '3', '4']\n",
    "\n",
    "plt.figure(figsize=(20, 10))\n",
    "plot_tree(final_clf, filled = True, rounded = True, feature_names = features, class_names = classes)\n",
    "plt.rcParams[\"figure.figsize\"] = (20, 20)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      " \n",
      " Classification report \n",
      "\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.76      0.59      0.67        32\n",
      "           1       0.18      0.27      0.21        11\n",
      "           2       0.00      0.00      0.00         7\n",
      "           3       0.14      0.14      0.14         7\n",
      "           4       0.10      0.33      0.15         3\n",
      "\n",
      "    accuracy                           0.40        60\n",
      "   macro avg       0.24      0.27      0.24        60\n",
      "weighted avg       0.46      0.40      0.42        60\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(\"\\n \\n Classification report \\n\\n\", classification_report(y_test, y_pred_test, zero_division=0))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 720x720 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x1440 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "cm = confusion_matrix(y_test, y_pred_test, labels=final_clf.classes_)\n",
    "disp = ConfusionMatrixDisplay(confusion_matrix=cm,\n",
    "                               display_labels=final_clf.classes_)\n",
    "\n",
    "plt.figure(figsize=(10, 10))\n",
    "disp.plot()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3.2. Random Forest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_train = np.ravel(y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [],
   "source": [
    "# First, model with max_depth=3\n",
    "\n",
    "# Scores on the train set\n",
    "acc_train_list, tpr_train_list, precision_train_list, = [], [], []        \n",
    "\n",
    "# Scores on the validation set\n",
    "acc_valid_list, tpr_valid_list, precision_valid_list = [], [], []\n",
    "\n",
    "# Scores on the test set\n",
    "acc_test_list, tpr_test_list, precision_test_list = [], [], []\n",
    "\n",
    "number_features = range(1, 14)\n",
    "\n",
    "for i in range(1, 14):  # We have 13 features         \n",
    "    # Define and train a model    \n",
    "    clf = RandomForestClassifier(criterion='entropy', max_depth=3, max_features=i, random_state=10)\n",
    "    clf.fit(X_train, y_train)\n",
    "    \n",
    "    # Predictions and scores on the train set\n",
    "    y_pred_train = pd.DataFrame(clf.predict(X_train))\n",
    "    acc_train = clf.score(X_train, y_train)\n",
    "    tpr_train = recall_score(y_train, y_pred_train, average='macro', zero_division=0)\n",
    "    precision_train = precision_score(y_train, y_pred_train, average='macro', zero_division=0)\n",
    "   \n",
    "    # Saving results \n",
    "    acc_train_list.append(acc_train)\n",
    "    tpr_train_list.append(tpr_train)\n",
    "    precision_train_list.append(precision_train)\n",
    "    \n",
    "    # Predictions and scores on the valid set\n",
    "    y_pred_valid = pd.DataFrame(clf.predict(X_valid))\n",
    "    acc_valid = clf.score(X_valid, y_valid)\n",
    "    tpr_valid = recall_score(y_valid, y_pred_valid, average='macro', zero_division=0)   \n",
    "    precision_valid = precision_score(y_valid, y_pred_valid, average='macro', zero_division=0)\n",
    "    \n",
    "    # Saving results \n",
    "    acc_valid_list.append(acc_valid)\n",
    "    tpr_valid_list.append(tpr_valid)\n",
    "    precision_valid_list.append(precision_valid)\n",
    "    \n",
    "    # Predictions and scores on the test set\n",
    "    y_pred_test = pd.DataFrame(clf.predict(X_test))\n",
    "    acc_test = clf.score(X_test, y_test)\n",
    "    tpr_test = recall_score(y_test, y_pred_test, average='macro', zero_division=0)\n",
    "    precision_test = precision_score(y_test, y_pred_test, average='macro', zero_division=0)\n",
    "    \n",
    "    # Saving results \n",
    "    acc_test_list.append(acc_test)\n",
    "    tpr_test_list.append(tpr_test)\n",
    "    precision_test_list.append(precision_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Accuracy on validation set</th>\n",
       "      <th>Recall on validation set</th>\n",
       "      <th>Precision on validation set</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Number of features</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.533333</td>\n",
       "      <td>0.2375</td>\n",
       "      <td>0.207895</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.533333</td>\n",
       "      <td>0.2375</td>\n",
       "      <td>0.207895</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.533333</td>\n",
       "      <td>0.2375</td>\n",
       "      <td>0.191228</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.566667</td>\n",
       "      <td>0.2775</td>\n",
       "      <td>0.309804</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.533333</td>\n",
       "      <td>0.2650</td>\n",
       "      <td>0.308333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0.533333</td>\n",
       "      <td>0.2650</td>\n",
       "      <td>0.281667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0.533333</td>\n",
       "      <td>0.2650</td>\n",
       "      <td>0.259944</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0.533333</td>\n",
       "      <td>0.2650</td>\n",
       "      <td>0.270238</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0.533333</td>\n",
       "      <td>0.2650</td>\n",
       "      <td>0.266667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>0.533333</td>\n",
       "      <td>0.2650</td>\n",
       "      <td>0.270238</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>0.533333</td>\n",
       "      <td>0.2650</td>\n",
       "      <td>0.253571</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>0.533333</td>\n",
       "      <td>0.2650</td>\n",
       "      <td>0.253571</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>0.533333</td>\n",
       "      <td>0.3025</td>\n",
       "      <td>0.273333</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    Accuracy on validation set  Recall on validation set  \\\n",
       "Number of features                                                         \n",
       "1                                     0.533333                    0.2375   \n",
       "2                                     0.533333                    0.2375   \n",
       "3                                     0.533333                    0.2375   \n",
       "4                                     0.566667                    0.2775   \n",
       "5                                     0.533333                    0.2650   \n",
       "6                                     0.533333                    0.2650   \n",
       "7                                     0.533333                    0.2650   \n",
       "8                                     0.533333                    0.2650   \n",
       "9                                     0.533333                    0.2650   \n",
       "10                                    0.533333                    0.2650   \n",
       "11                                    0.533333                    0.2650   \n",
       "12                                    0.533333                    0.2650   \n",
       "13                                    0.533333                    0.3025   \n",
       "\n",
       "                    Precision on validation set  \n",
       "Number of features                               \n",
       "1                                      0.207895  \n",
       "2                                      0.207895  \n",
       "3                                      0.191228  \n",
       "4                                      0.309804  \n",
       "5                                      0.308333  \n",
       "6                                      0.281667  \n",
       "7                                      0.259944  \n",
       "8                                      0.270238  \n",
       "9                                      0.266667  \n",
       "10                                     0.270238  \n",
       "11                                     0.253571  \n",
       "12                                     0.253571  \n",
       "13                                     0.273333  "
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Results for the validation set, max_depth=3\n",
    "\n",
    "multiclass_results_rf_3 = pd.DataFrame({'Number of features': range(1, 14),\n",
    "                              'Accuracy on validation set': acc_valid_list,\n",
    "                              'Recall on validation set': tpr_valid_list,\n",
    "                              'Precision on validation set': precision_valid_list}).set_index(['Number of features'])\n",
    "multiclass_results_rf_3\n",
    "\n",
    "# multiclass_results_rf_3.to_excel('multiclass_results_rf_3.xlsx', index =True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x216 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plots for validation scores, depth=3\n",
    "\n",
    "plt.figure(figsize=(6, 3))\n",
    "plt.grid(ls='--')\n",
    "plt.title('Scores on the validation set (multiclass), depth=3')\n",
    "plt.xlabel('Number of features')\n",
    "plt.plot(number_features, acc_valid_list, color = 'red')\n",
    "plt.plot(number_features, tpr_valid_list, color = 'blue')\n",
    "plt.plot(number_features, precision_valid_list, color = 'orange')\n",
    "plt.legend(['Accuracy', 'Recall', 'Precision'])\n",
    "ticks = np.arange(1, 14, 1).tolist()\n",
    "plt.xticks(ticks)\n",
    "plt.ylim(0.1, 0.7)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Second, model with max_depth=5\n",
    "\n",
    "# Scores on the train set\n",
    "acc_train_list, tpr_train_list, precision_train_list, = [], [], []        \n",
    "\n",
    "# Scores on the validation set\n",
    "acc_valid_list, tpr_valid_list, precision_valid_list = [], [], []\n",
    "\n",
    "# Scores on the test set\n",
    "acc_test_list, tpr_test_list, precision_test_list = [], [], []\n",
    "\n",
    "\n",
    "for i in range(1, 14):  # We have 13 features         \n",
    "    # Define and train a model    \n",
    "    clf = RandomForestClassifier(criterion='entropy', max_depth=5, max_features=i, random_state=10)\n",
    "    clf.fit(X_train, y_train)\n",
    "    \n",
    "    # Predictions and scores on the train set\n",
    "    y_pred_train = pd.DataFrame(clf.predict(X_train))\n",
    "    acc_train = clf.score(X_train, y_train)\n",
    "    tpr_train = recall_score(y_train, y_pred_train, average='macro', zero_division=0)\n",
    "    precision_train = precision_score(y_train, y_pred_train, average='macro', zero_division=0)\n",
    "   \n",
    "    # Saving results \n",
    "    acc_train_list.append(acc_train)\n",
    "    tpr_train_list.append(tpr_train)\n",
    "    precision_train_list.append(precision_train)\n",
    "    \n",
    "    # Predictions and scores on the valid set\n",
    "    y_pred_valid = pd.DataFrame(clf.predict(X_valid))\n",
    "    acc_valid = clf.score(X_valid, y_valid)\n",
    "    tpr_valid = recall_score(y_valid, y_pred_valid, average='macro', zero_division=0)   \n",
    "    precision_valid = precision_score(y_valid, y_pred_valid, average='macro', zero_division=0)\n",
    "    \n",
    "    # Saving results \n",
    "    acc_valid_list.append(acc_valid)\n",
    "    tpr_valid_list.append(tpr_valid)\n",
    "    precision_valid_list.append(precision_valid)\n",
    "    \n",
    "    # Predictions and scores on the test set\n",
    "    y_pred_test = pd.DataFrame(clf.predict(X_test))\n",
    "    acc_test = clf.score(X_test, y_test)\n",
    "    tpr_test = recall_score(y_test, y_pred_test, average='macro', zero_division=0)\n",
    "    precision_test = precision_score(y_test, y_pred_test, average='macro', zero_division=0)\n",
    "    \n",
    "    # Saving results \n",
    "    acc_test_list.append(acc_test)\n",
    "    tpr_test_list.append(tpr_test)\n",
    "    precision_test_list.append(precision_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Accuracy on validation set</th>\n",
       "      <th>Recall on validation set</th>\n",
       "      <th>Precision on validation set</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Number of features</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.633333</td>\n",
       "      <td>0.3675</td>\n",
       "      <td>0.393137</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.566667</td>\n",
       "      <td>0.2875</td>\n",
       "      <td>0.241228</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.566667</td>\n",
       "      <td>0.2775</td>\n",
       "      <td>0.309804</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.533333</td>\n",
       "      <td>0.2375</td>\n",
       "      <td>0.200000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.533333</td>\n",
       "      <td>0.2650</td>\n",
       "      <td>0.289706</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0.533333</td>\n",
       "      <td>0.2650</td>\n",
       "      <td>0.275000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0.533333</td>\n",
       "      <td>0.2925</td>\n",
       "      <td>0.314286</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0.533333</td>\n",
       "      <td>0.2925</td>\n",
       "      <td>0.294286</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0.533333</td>\n",
       "      <td>0.2650</td>\n",
       "      <td>0.270238</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>0.533333</td>\n",
       "      <td>0.2925</td>\n",
       "      <td>0.319048</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>0.533333</td>\n",
       "      <td>0.2925</td>\n",
       "      <td>0.319048</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>0.533333</td>\n",
       "      <td>0.2925</td>\n",
       "      <td>0.299048</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>0.566667</td>\n",
       "      <td>0.3425</td>\n",
       "      <td>0.322857</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    Accuracy on validation set  Recall on validation set  \\\n",
       "Number of features                                                         \n",
       "1                                     0.633333                    0.3675   \n",
       "2                                     0.566667                    0.2875   \n",
       "3                                     0.566667                    0.2775   \n",
       "4                                     0.533333                    0.2375   \n",
       "5                                     0.533333                    0.2650   \n",
       "6                                     0.533333                    0.2650   \n",
       "7                                     0.533333                    0.2925   \n",
       "8                                     0.533333                    0.2925   \n",
       "9                                     0.533333                    0.2650   \n",
       "10                                    0.533333                    0.2925   \n",
       "11                                    0.533333                    0.2925   \n",
       "12                                    0.533333                    0.2925   \n",
       "13                                    0.566667                    0.3425   \n",
       "\n",
       "                    Precision on validation set  \n",
       "Number of features                               \n",
       "1                                      0.393137  \n",
       "2                                      0.241228  \n",
       "3                                      0.309804  \n",
       "4                                      0.200000  \n",
       "5                                      0.289706  \n",
       "6                                      0.275000  \n",
       "7                                      0.314286  \n",
       "8                                      0.294286  \n",
       "9                                      0.270238  \n",
       "10                                     0.319048  \n",
       "11                                     0.319048  \n",
       "12                                     0.299048  \n",
       "13                                     0.322857  "
      ]
     },
     "execution_count": 120,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Results for the validation set, max_depth=5\n",
    "\n",
    "multiclass_results_rf_5 = pd.DataFrame({'Number of features': range(1, 14),\n",
    "                              'Accuracy on validation set': acc_valid_list,\n",
    "                              'Recall on validation set': tpr_valid_list,\n",
    "                              'Precision on validation set': precision_valid_list}).set_index(['Number of features'])\n",
    "multiclass_results_rf_5\n",
    "\n",
    "# multiclass_results_rf_5.to_excel('multiclass_results_rf_5.xlsx', index =True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x216 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plots for validation scores, depth=5\n",
    "\n",
    "plt.figure(figsize=(6, 3))\n",
    "plt.grid(ls='--')\n",
    "plt.title('Scores on the validation set (multiclass), depth=5')\n",
    "plt.xlabel('Number of features')\n",
    "plt.plot(number_features, acc_valid_list, color = 'red')\n",
    "plt.plot(number_features, tpr_valid_list, color = 'blue')\n",
    "plt.plot(number_features, precision_valid_list, color = 'orange')\n",
    "plt.legend(['Accuracy', 'Recall', 'Precision'])\n",
    "ticks = np.arange(1, 14, 1).tolist()\n",
    "plt.xticks(ticks)\n",
    "plt.ylim(0.1, 0.7)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Validation set</th>\n",
       "      <th>Train set</th>\n",
       "      <th>Test set</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Accuracy</th>\n",
       "      <td>0.633333</td>\n",
       "      <td>0.875000</td>\n",
       "      <td>0.566667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Recall</th>\n",
       "      <td>0.367500</td>\n",
       "      <td>0.875000</td>\n",
       "      <td>0.269075</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Precision</th>\n",
       "      <td>0.393137</td>\n",
       "      <td>0.884717</td>\n",
       "      <td>0.278333</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Validation set  Train set  Test set\n",
       "Accuracy         0.633333   0.875000  0.566667\n",
       "Recall           0.367500   0.875000  0.269075\n",
       "Precision        0.393137   0.884717  0.278333"
      ]
     },
     "execution_count": 122,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# From the table and plots above we can see that the highest recall score (TP/P) for the validation set we get with depth of 5 \n",
    "# and number of features of 1\n",
    "\n",
    "n_features = 1\n",
    "\n",
    "multi_final_rf = pd.DataFrame({'Validation set': [acc_valid_list[n_features-1], tpr_valid_list[n_features-1], precision_valid_list[n_features-1]],\n",
    "                              'Train set': [acc_train_list[n_features-1], tpr_train_list[n_features-1], precision_train_list[n_features-1]],\n",
    "                              'Test set': [acc_test_list[n_features-1], tpr_test_list[n_features-1], precision_test_list[n_features-1]]\n",
    "                              }).set_axis(['Accuracy', 'Recall', 'Precision'], axis=0)\n",
    "multi_final_rf\n",
    "\n",
    "# multi_final_rf.to_excel('multi_final_rf.xlsx', index =True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {},
   "outputs": [],
   "source": [
    "final_clf = RandomForestClassifier(criterion='entropy', max_depth=5, max_features=1, random_state=10)\n",
    "final_clf.fit(X_train, y_train)\n",
    "y_pred_test = pd.DataFrame(final_clf.predict(X_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.07131247, 0.05069666, 0.08220465, 0.06247926, 0.06945475,\n",
       "       0.04147029, 0.06519986, 0.10621258, 0.07426799, 0.09427503,\n",
       "       0.07424949, 0.10773325, 0.10044372])"
      ]
     },
     "execution_count": 124,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_clf.feature_importances_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Importance multi</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Features</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>ca</th>\n",
       "      <td>0.107733</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>thalach</th>\n",
       "      <td>0.106213</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>thal</th>\n",
       "      <td>0.100444</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>oldpeak</th>\n",
       "      <td>0.094275</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cp</th>\n",
       "      <td>0.082205</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Importance multi\n",
       "Features                  \n",
       "ca                0.107733\n",
       "thalach           0.106213\n",
       "thal              0.100444\n",
       "oldpeak           0.094275\n",
       "cp                0.082205"
      ]
     },
     "execution_count": 125,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "importance_rf_multi = pd.DataFrame({'Features': X_train.columns,\n",
    "                             'Importance multi': final_clf.feature_importances_}).set_index(['Features']).sort_values('Importance multi', ascending=False)\n",
    "importance_rf_multi.head()\n",
    "\n",
    "# importance_rf_multi.to_excel('importance_rf_multi.xlsx', index=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "features=X.columns[:]\n",
    "importances = final_clf.feature_importances_\n",
    "indices = np.argsort(importances)\n",
    "\n",
    "plt.figure(figsize=(10, 5))\n",
    "plt.grid(ls='--', axis='x')\n",
    "plt.title('Feature importances, RF multi-class, depth=5, features=1')\n",
    "plt.barh(range(len(indices)), importances[indices], color='b', align='center')\n",
    "plt.yticks(range(len(indices)), features[indices])\n",
    "plt.xlabel('%, in decimals')\n",
    "ticks = np.arange(0, 0.16, 0.01).tolist()\n",
    "plt.xticks(ticks)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      " \n",
      " Classification report \n",
      "\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.78      0.97      0.86        32\n",
      "           1       0.25      0.09      0.13        11\n",
      "           2       0.17      0.14      0.15         7\n",
      "           3       0.20      0.14      0.17         7\n",
      "           4       0.00      0.00      0.00         3\n",
      "\n",
      "    accuracy                           0.57        60\n",
      "   macro avg       0.28      0.27      0.26        60\n",
      "weighted avg       0.50      0.57      0.52        60\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(\"\\n \\n Classification report \\n\\n\", classification_report(y_test, y_pred_test, zero_division=0))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 720x720 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x1440 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10, 10))\n",
    "\n",
    "cm = confusion_matrix(y_test, y_pred_test, labels=final_clf.classes_)\n",
    "disp = ConfusionMatrixDisplay(confusion_matrix=cm,\n",
    "                               display_labels=final_clf.classes_)\n",
    "disp.plot()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3.3. Multi-class classification - comparison"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Test set DT</th>\n",
       "      <th>Test set RF</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Accuracy</th>\n",
       "      <td>0.400000</td>\n",
       "      <td>0.566667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Recall</th>\n",
       "      <td>0.268534</td>\n",
       "      <td>0.269075</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Precision</th>\n",
       "      <td>0.235866</td>\n",
       "      <td>0.278333</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Test set DT  Test set RF\n",
       "Accuracy      0.400000     0.566667\n",
       "Recall        0.268534     0.269075\n",
       "Precision     0.235866     0.278333"
      ]
     },
     "execution_count": 129,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "multi_compare = pd.concat([multi_final_dt, multi_final_rf], axis=1).drop(['Validation set', 'Train set'], axis=1).set_axis(['Test set DT', 'Test set RF'], axis=1)\n",
    "multi_compare\n",
    "\n",
    "# multi_compare.to_excel('multi_compare.xlsx', index=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "multi_compare.plot.bar(title = 'Multi-class classification: DT vs. RF', figsize=(8, 5), color=['pink', 'mediumvioletred'])\n",
    "plt.xticks(rotation=0)\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
